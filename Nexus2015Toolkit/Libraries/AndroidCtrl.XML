<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AndroidCtrl</name>
    </assembly>
    <members>
        <member name="T:AndroidCtrl.ADBSocket.ADBSocket">
            <summary>
             ADB raw socket
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.#ctor(System.Net.IPEndPoint)">
            <summary>
             Creates an ADB socket
            </summary>
            <param name="ipEndPoint">IPEndPoint</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.#ctor(System.String,System.Int32)">
            <summary>
             Creates an ADB socket
            </summary>
            <param name="ip">Device IP</param>
            <param name="port">Port</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
             Creates an ADB socket
            </summary>
            <param name="ipAddress">Device IP</param>
            <param name="port">Port</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.Dispose">
            <summary>
             IDisposable
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.Connections">
            <summary>
             Returs the current open connections
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.ChunkSize">
            <summary>
             Get/Set the chunk size
            <para>*NOTE* Default is 64kb, older clients may have 4096 byte hardcoded. This class will switch in that case to 4096 byte chunks.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.Device">
            <summary>
             Returns the device informations
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.IPEndPoint">
            <summary>
             Get/Set the IPEndPoint
            <para>*NOTE* This property can only be changed if the socket is disconnected!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.InputEncoding">
            <summary>
             Get/Set the InputEncoding
            <para>*NOTE* Default is UTF8</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.Connected">
            <summary>
             True if the client is connected otherwise false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.OutputEncoding">
            <summary>
             Get/Set the OutputEncoding
            <para>*NOTE* Default is UTF8</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.ReceiveBufferSize">
            <summary>
             Get/Set the receive buffer size
            <para>*NOTE* The default is 8192</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.ReceiveTimeout">
            <summary>
             Get/Set the receive timeout
            <para>*NOTE* The default timeout is 30000</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.SendBufferSize">
            <summary>
             Get/Set the send buffer size
            <para>*NOTE* The default is 8192</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADBSocket.SendTimeout">
            <summary>
             Get/Set the send timeout
            <para>*NOTE* The default timeout is 30000</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.Connect">
            <summary>
             Connect to the EndPoint
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.Disconnect(System.Boolean)">
            <summary>
             Disconnect
            </summary>
            <param name="reUseSocket">true to reuse the socket otherwise false</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.GetConnection">
            <summary>
             Returns a fresh data connection
            </summary>
            <returns>Connection</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.Read(System.Byte[],System.Int32)">
            <summary>
             Reads the given amount of bytes into the given byte[] buffer
            </summary>
            <param name="buffer">byte[] buffer</param>
            <param name="count">byte amount to read or -1 to read the full buffer size</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.ReadPacket">
            <summary>
             Reads the next packet from the stream/socket
            </summary>
            <returns>Packet or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.Send(AndroidCtrl.ADBSocket.IDADBCmd,System.UInt32,System.UInt32)">
            <summary>
             Writes the given data to the stream/socket
            <para>*NOTE* All parameter will be set to little-endian byte order.</para>
            </summary>
            <param name="cmd">command</param>
            <param name="arg1">1st argument</param>
            <param name="arg2">2cd argument</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.Send(AndroidCtrl.ADBSocket.IDADBCmd,System.UInt32,System.UInt32,System.String)">
            <summary>
             Writes the given data to the stream/socket
            <para>*NOTE* data will be \0 terminated</para>
            <para>*NOTE* All parameter will be set to little-endian byte order.</para>
            </summary>
            <param name="cmd">command</param>
            <param name="arg1">1st argument</param>
            <param name="arg2">2cd argument</param>
            <param name="data">string to send</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.Send(AndroidCtrl.ADBSocket.IDADBCmd,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
             Writes the given data to the stream/socket
            <para>*NOTE* All parameter will be set to little-endian byte order.</para>
            </summary>
            <param name="cmd">command</param>
            <param name="arg1">1st argument</param>
            <param name="arg2">2cd argument</param>
            <param name="data">byte[] to send</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADBSocket.Send(System.Byte[])">
            <summary>
             Write the given RAW bytes to the stream/socket
            <para>*NOTE* Remember, all packets u send MUST be little-endian byte ordered!</para>
            </summary>
            <param name="packet">the packet to send</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADBSocket.ADB">
            <summary>
             ADB protocol Client - BETA
            <para/>*WARNING*
            <para/>This ADB client is currently in BETA state and can have data losses!
            <para/>For a stable and reliable usage, pls use AndroidCtrl.ADB!
            <para/>*NOTE*
            <para/>ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.
            <para/>Exceptions are nested commands, these u have to quote ur self.
            <para/>All functions in this and some sub-classes are designed to work primary without root.
            <para/>If u want to use all functions with root rights, u have to restart the ADB Deamon on the device with root rights. Also u need to set UseSu to IDSu.AUTO or IDSu.ENFORCE.
            <para/>U can restart the device daemon by using Instance().Device.Daemon.Root() or simply Instance().Root().
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Instance(System.String)">
            <summary>
             Returns the choosen Client instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every Client instance.
            </summary>
            <param name="device">The device id/serialnumber</param>
            <returns>Client or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Instance(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Returns the choosen Client instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every Client instance.
            </summary>
            <param name="device">Device</param>
            <returns>Client or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Instance(AndroidCtrl.ADBSocket.ADBSocket)">
            <summary>
             Returns and if not exists creates, the choosen client instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every Client instance.
            </summary>
            <param name="socket">ADBSocket</param>
            <returns>Client or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.RemoveDevice(System.String)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.RemoveDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.SelectDevice(System.String)">
            <summary>
             Select the given device serial in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via ADB.Instance().
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.SelectDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Select the given device in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via ADB.Instance().
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADB.Version">
            <summary>
             Get ADBSocket version
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Connect(System.String,System.Int32)">
            <summary>
             Try to connect to the given device
            </summary>
            <returns>ADBSocket or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Connect(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Connect the given device
            </summary>
            <param name="device">DataModelDevicesItem</param>
            <returns>List&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Disconnect">
            <summary>
             Disconnect all connected devices
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Disconnect(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Disconnect the given device
            </summary>
            <param name="device">Device</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Disconnect(System.String,System.Int32)">
            <summary>
             Disconnect the given device
            </summary>
            <param name="ip">IP-Address</param>
            <param name="port">Port</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Dispose(System.Boolean)">
            <summary>
             Dispose is not a real IDisposable but it do its work.
            <para/>It will reset the whole ADB class to null, everything in this class will be deleted, stopped, closed, etc...
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Manufacturer">
            <summary>
             Opens the manufacturer homepage in the default browser
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADB.Device">
            <summary>
             Returns and if not exist, creates the Device instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADB.ShellRT">
            <summary>
             Returns a new ShellRT instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADB.DeviceID">
            <summary>
             DeviceID return the DeviceID for this class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADB.IsBooted">
            <summary>
             Checks if the device is booted
            <para/>*NOTE*
            <para/>This will return true when android finished the complete boot procedure
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADB.IsRoot">
            <summary>
             IsRoot checks if ADB is running as root in this instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ADB.UseBusyBox">
            <summary>
             UseBusyBox de-/activate BusyBox for the whole instance. Set false for unset.
            <para/>*NOTE*
            <para/>If no BusyBox is installed on the device, this parameter can't be set to true it will always return false!
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Backup(System.String,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Backup the device with given arguments.
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Backup arguments</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.BugReport">
            <summary>
             BugReport returns all information from the device that should be included in a bug report
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Emu(System.String,System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Emu(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ExecOut(System.String,System.IO.Stream,System.Int32)">
            <summary>
            ExecOut is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">output stream</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Forward(System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Forward(System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Forward(AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Forward a port, list or remove them
            </summary>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Forward(System.String,AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Forward a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.GetDevPath">
            <summary>
            <para>NOT-Implemented</para>
             Return the devpath or an empty string
            </summary>
            <returns>StateID</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.GetSerial">
            <summary>
             Return the Device serialnumber or ip:port
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.GetState">
            <summary>
             Return the Device state
            </summary>
            <returns>StateID</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Install(System.String,System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Installer arguments or null</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Install(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="localPaths">File paths</param>
            <param name="args">Installer arguments or null</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.JDWP">
            <summary>
             JDWP list PIDs of processes hosting a JDWP transport
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Keygen(System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Keygen generate adb public/private key.
            <para/>*NOTE*
            <para/>The private key is stored in (the/given/path), and the public key is stored in (the/given/path.pub). Any existing files will be overwritten.
            </summary>
            <param name="localKeyPath">local key file path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Push(System.String,System.String)">
            <summary>
             Push the given local object to the given remote location
            <para>File usage: C:\\tmp.apk /sdcard/tmp.apk</para>
            <para>Directory usage: C:\\tmp\\ /sdcard/</para>
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Push(System.IO.DirectoryInfo,System.String)">
            <summary>
             Push the given directory to the given remote location
            </summary>
            <param name="localDirectory">DirectoryInfo</param>
            <param name="remotePath">Remote path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Push(System.IO.FileInfo,System.String)">
            <summary>
             Push the given file to the given remote location
            </summary>
            <param name="localFile">FileInfo</param>
            <param name="remotePath">Remote path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Pull(System.String,System.String)">
            <summary>
             Pull the given remote object to the given local location
            <para>File usage: /sdcard/tmp.apk C:\\tmp.apk</para>
            <para>Directory usage: /sdcard/tmp/ C:\\</para>
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Pull(System.String,System.IO.DirectoryInfo)">
            <summary>
             Pull the given remote directory to the given local location
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localDirectory">DirectoryInfo</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Pull(System.String,System.IO.FileInfo)">
            <summary>
             Pull the given remote file to the given local location
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localFile">FileInfo</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Reboot(AndroidCtrl.IDBoot)">
            <summary>
             Reboot the device to given mode
            <para/>*NOTE*
            <para/>All reboot requests will be closed after 1000 ms (this will not freeze the thread).
            </summary>
            <param name="mode">BootMode</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Remount">
            <summary>
             Remount the device partitions
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Restore(System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Restore the backup to the device.
            </summary>
            <param name="localPath">File path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Reverse(System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Reverse(System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Reverse(AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Reverse a port, list or remove them
            </summary>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Reverse(System.String,AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Root">
            <summary>
             Restarts adb daemon with root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmd(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmd(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmd(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmd(System.String,System.IO.Stream,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute the given shell command and write the output to the given file
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">command to execute</param>
            <param name="stream">output stream</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmdHRes(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmdHRes(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmdHRes(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmdStack(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.ShellCmdStack(System.String,System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Sideload(System.String,System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Sideloads a rom
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The recovery must support this function
            </summary>
            <param name="localPath">Local path (c:\path\to\rom.zip)</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.TCPIP(System.Int32)">
            <summary>
             Restart adbd daemon listen on given tcp port
            </summary>
            <param name="port">port 5555</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.UnInstall(System.String,System.Boolean)">
            <summary>
             UnInstall an APK on the Device
            </summary>
            <param name="package">package name e.g. com.example.package</param>
            <param name="keepData">keeps the cache and userdata</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.UnRoot">
            <summary>
             Restarts adb daemon without root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.USB">
            <summary>
             Restart adbd daemon listen on USB
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ADB.Verity(AndroidCtrl.IDDMVerity)">
            <summary>
            <para>NOT-Implemented</para>
             Dis-/Enable dm-verity on USERDEBUG builds
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="T:AndroidCtrl.ADBSocket.Connection">
            <summary>
             ADB raw data connection
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.Connection.IsConnected">
            <summary>
             True if connection is open otherwise false
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Connection.Finalize">
            <summary>
             Destructor
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Connection.Dispose">
            <summary>
             IDisposable
            <para>*NOTE* The ADBSocket will not disposed</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Connection.Close">
            <summary>
             Close this thread
            <para>*NOTE* This will close the connection</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Connection.Open(System.String)">
            <summary>
             Spawns a new thread on the device
            </summary>
            <param name="type">connection type</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Connection.GetPacket">
            <summary>
             Gets the next packet in the queue
            <para>*NOTE* If no packet is available, this method will block the thread for max 30 sec</para>
            </summary>
            <returns>Packet or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Connection.Send(AndroidCtrl.ADBSocket.IDADBCmd)">
            <summary>
             Writes the given data to the stream/socket
            <para>*NOTE* All parameter will be automatically set to little-endian byte order.</para>
            </summary>
            <param name="cmd">command</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Connection.Send(AndroidCtrl.ADBSocket.IDADBCmd,System.String)">
            <summary>
             Writes the given data to the stream/socket
            <para>*NOTE* data will be automatically \0 terminated</para>
            <para>*NOTE* All parameter will be automatically set to little-endian byte order.</para>
            </summary>
            <param name="cmd">command</param>
            <param name="data">string to send</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Connection.Send(AndroidCtrl.ADBSocket.IDADBCmd,System.Byte[])">
            <summary>
             Writes the given data to the stream/socket
            <para>*NOTE* All parameter will be automatically set to little-endian byte order.</para>
            </summary>
            <param name="cmd">command</param>
            <param name="data">byte[] to send</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADBSocket.IDADBCmd">
            <summary>
             ADB protocol commands
            <para>*NOTE* All commands are formatted as uint (little-endian byte order)</para>
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBCmd.AUTH">
            <summary>
             Implies AUTH (0x48545541) command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBCmd.CLSE">
            <summary>
             Implies CLSE (0x45534c43) command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBCmd.CNXN">
            <summary>
             Implies CNXN (0x4e584e43) command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBCmd.NONE">
            <summary>
             Implies NONE (dummy command)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBCmd.OKAY">
            <summary>
             Implies OKAY (0x59414b4f) command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBCmd.OPEN">
            <summary>
             Implies OPEN (0x4e45504f) command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBCmd.SYNC">
            <summary>
             Implies SYNC (0x434e5953) command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBCmd.WRTE">
            <summary>
             Implies WRTE (0x45545257) command
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADBSocket.IDADBSyncCmd">
            <summary>
             ADB protocol sync commands
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.DATA">
            <summary>
             Implies DATA command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.DENT">
            <summary>
             Implies DENT command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.DONE">
            <summary>
             Implies DONE command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.FAIL">
            <summary>
             Implies FAIL command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.LIST">
            <summary>
             Implies LIST command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.NONE">
            <summary>
             Implies NONE (dummy command)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.OKAY">
            <summary>
             Implies OKAY command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.QUIT">
            <summary>
             Implies QUIT command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.RECV">
            <summary>
             Implies RECV command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.SEND">
            <summary>
             Implies SEND command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADBSocket.IDADBSyncCmd.STAT">
            <summary>
             Implies STAT command
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADBSocket.Packet">
            <summary>
             ADB data packet
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.Packet.Arg1">
            <summary>
             Arg1
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.Packet.Arg2">
            <summary>
             Arg2
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.Packet.Command">
            <summary>
             Command
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.Packet.Crc">
            <summary>
             Crc
            <para>*NOTE* Will be generated when Data is set</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.Packet.Data">
            <summary>
             Data
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.Packet.DataLength">
            <summary>
             DataLength
            <para>*NOTE* Will be set when Data is set</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.Packet.Magic">
            <summary>
             Magic
            <para>*NOTE* Will be generated when Command is set</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.#ctor">
            <summary>
             Create a new empty packet
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.#ctor(System.Byte[])">
            <summary>
             Create a new packet from an received (raw) packet
            <para>*NOTE* The header MUST be little-endian byte ordered and MUST have a length equal to 24 or bigger</para>
            </summary>
            <param name="bytes">received packet</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
             Create a new packet from the given parameter
            </summary>
            <param name="cmd">IDADBCmd</param>
            <param name="arg1">arg1</param>
            <param name="arg2">arg2</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.#ctor(AndroidCtrl.ADBSocket.IDADBCmd,System.UInt32,System.UInt32)">
            <summary>
             Create a new packet from the given parameter
            </summary>
            <param name="cmd">IDADBCmd</param>
            <param name="arg1">arg1</param>
            <param name="arg2">arg2</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
             Create a new packet from the given parameter
            </summary>
            <param name="cmd">command (little-endian)</param>
            <param name="arg1">arg1</param>
            <param name="arg2">arg2</param>
            <param name="data">data</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.#ctor(AndroidCtrl.ADBSocket.IDADBCmd,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
             Create a new packet from the given parameter
            </summary>
            <param name="cmd">IDADBCmd</param>
            <param name="arg1">arg1</param>
            <param name="arg2">arg2</param>
            <param name="data">data</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.ToByteArray">
            <summary>
             Return this packet as little-endian formatted byte[]
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.ToString">
            <summary>
             Return this packet as formatted string
            <para>*NOTE* The basic format looks like "{0} 0x{1:X8} 0x{2:X8} 0x{3:X8} 0x{4:X8} 0x{5:X8} {6}" if u need another format use ToString(format, encoding)</para>
            <para>*NOTE* This function is only for debug</para>
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.ToString(System.String,System.Text.Encoding)">
            <summary>
             Return this packet as formatted string
            <para>*NOTE* This function is only for debug</para>
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.Verify">
            <summary>
             Verfiy the packet structure
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.Packet.FormatHeader(System.Byte[])">
            <summary>
             Flips the first 24 byte to little-endian byte order when needed
            </summary>
            <param name="bytes">packet/header</param>
            <returns>byte[]</returns>
        </member>
        <member name="T:AndroidCtrl.ADBSocket.SyncPacket">
            <summary>
             ADB data (sync) packet
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.SyncPacket.#ctor(System.Byte[],AndroidCtrl.ADBSocket.IDADBSyncCmd)">
            <summary>
             Create a new packet from an received (raw sync) packet
            </summary>
            <param name="bytes">received packet data</param>
            <param name="cmd">received packet command</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.SyncPacket.#ctor(AndroidCtrl.ADBSocket.IDADBSyncCmd,System.Byte[],System.DateTime)">
            <summary>
             Creates a new sync packet from the given parameter
            <para>*NOTE* This packet constructor set Done to true, this will mark in file transfers the last packet.</para>
            </summary>
            <param name="cmd">IDADBSyncCmd</param>
            <param name="data">data[]</param>
            <param name="datetime">DateTime</param>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.SyncPacket.#ctor(AndroidCtrl.ADBSocket.IDADBSyncCmd,System.Byte[])">
            <summary>
             Creates a new sync packet from the given parameter
            </summary>
            <param name="cmd">IDADBSyncCmd</param>
            <param name="data">data[]</param>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.SyncPacket.Command">
            <summary>
             Command
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.SyncPacket.Data">
            <summary>
             Get/Set the data byte[]
            <para>*NOTE* This will also set the data length</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.SyncPacket.DataLength">
            <summary>
             Get the data length
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.SyncPacket.DateTime">
            <summary>
             Get/Set the datetime
            <para>*NOTE* Only used in file transfers</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.SyncPacket.Done">
            <summary>
             Get/Set if this is the last packet
            <para>*NOTE* Only used in file transfers</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.SyncPacket.StatMode">
            <summary>
             Get/Set the element mode
            <para>*NOTE* Only used in file transfers (STAT)</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.SyncPacket.StatSize">
            <summary>
             Get/Set the element size
            <para>*NOTE* Only used in file transfers (STAT)</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.SyncPacket.ToByteArray">
            <summary>
             Return this packet as little-endian formatted byte[]
            </summary>
            <returns>byte[] or null</returns>
        </member>
        <member name="T:AndroidCtrl.ADBSocket.ShellRT">
            <summary>
             ShellRT starts an ADB shell process in an background thread and return its output via its CallbackProcessOutput delegate, 
             u have also the ablility to send commands to the running shell via Send("my command") function.
             <para>*NOTE* Between the cmds is an delay of 150 ms</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ShellRT.Dispose(System.Boolean)">
            <summary>
             IDispose
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADBSocket.ShellRT.IsAlive">
            <summary>
             Checks if the shell is running
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ShellRT.Send(System.String)">
            <summary>
             Send the given command to the running shell
            </summary>
            <param name="cmd">command to send</param>
        </member>
        <member name="E:AndroidCtrl.ADBSocket.ShellRT.ErrorResponseCallback">
            <summary>
             Callback define the ErrorResponse function
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADBSocket.ShellRT.OutputResponseCallback">
            <summary>
             Callback define the OutputResponse function
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ShellRT.Abort">
            <summary>
             Dispose the connection and its background thread
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADBSocket.ShellRT.Start">
            <summary>
             Start the process and its background thread if "exe" exists
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.ADBase">
            <summary>
             abstract ADB base class
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBase.CmdTimeout">
            <summary>
             CmdTimeout define for the whole instance how long Xecute() will wait for the given process to responde.
            <para/>*NOTE*
            <para/>Instance default is "-1", it implies infinite
            <para/>The value are milliseconds 30 sec = 30 000 ms
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBase.UseSu">
            <summary>
             UseSu manage the su use for shell requests.
            <para/>*NOTE*
            <para/>If su is not installed on the device, this parameter can't be changed and will always return IDSu.NEVER!
            <para/>This property will not affect the ADB base class, but all subclasses that interact with the shell! Except these which needs root to interact with the device.
            <para/>If adbd runs in root mode or su is found, while creating the ADB device instance, the default value will be IDSu.AUTO
            <para/>IDSu.AUTO will be converted into IDSu.ENFORCE or IDSu.NEVER when the 1st check appear
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBase.DeviceID">
            <summary>
             DeviceID return the DeviceID for this class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBase.IsBooted">
            <summary>
             Checks if the device is booted
            <para/>*NOTE*
            <para/>This will return true when android finished the complete boot procedure
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBase.IsRoot">
            <summary>
             IsRoot checks if ADB is running as root in this instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBase.UseBusyBox">
            <summary>
             UseBusyBox de-/activate BusyBox for the whole instance. Set false for unset.
            <para/>*NOTE*
            <para/>If no BusyBox is installed on the device, this parameter can't be set to true it will always return false!
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBase.Device">
            <summary>
             Returns and if not exist, creates the Device instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBase.ShellRT">
            <summary>
             Returns a new ShellRT instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Backup(System.String,System.String)">
            <summary>
            Backup the Device with given arguments.
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Backup arguments</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.BugReport">
            <summary>
             BugReport returns all information from the device that should be included in a bug report
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Emu(System.String,System.Int32)">
            <summary>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Emu(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ExecOut(System.String,System.IO.Stream,System.Int32)">
            <summary>
             ExecOut is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">output stream</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Forward(System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Forward(System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Forward(AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Forward(System.String,AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.GetDevPath">
            <summary>
             Return the devpath or an empty string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.GetSerial">
            <summary>
             Return the Device serialnumber or an empty string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.GetState">
            <summary>
             Return the Device state
            </summary>
            <returns>StateID</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Install(System.String,System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Installer arguments or null</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Install(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="localPaths">File paths</param>
            <param name="args">Installer arguments or null</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.JDWP">
            <summary>
             JDWP list PIDs of processes hosting a JDWP transport
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Keygen(System.String)">
            <summary>
             Keygen generate adb public/private key.
            <para/>*NOTE*
            <para/>The private key is stored in (the/given/path), and the public key is stored in (the/given/path.pub). Any existing files will be overwritten.
            </summary>
            <param name="localKeyPath">local key file path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Pull(System.String,System.String)">
            <summary>
             Get files/folders from the Device
            </summary>
            <param name="remotePath">Device path remember use "/" instead of "\" or "\\"</param>
            <param name="localPath">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Push(System.String,System.String)">
            <summary>
             Send files/folders to the Device
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Device path remember use "/" instead of "\" or "\\"</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Reboot(AndroidCtrl.IDBoot)">
            <summary>
             Reboot the device to given mode
            <para/>*NOTE*
            <para/>All reboot requests will be closed after 1000 ms (this will not freeze the thread).
            </summary>
            <param name="mode">BootMode</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Remount">
            <summary>
             Remounts the Device system partition to read-write
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Restore(System.String)">
            <summary>
             Restore backup to Device.
            </summary>
            <param name="localPath">File path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Reverse(System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Reverse(System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Reverse(AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Reverse(System.String,AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Root">
            <summary>
             Restarts adb daemon with root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmd(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmd(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmd(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmdHRes(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmdHRes(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmdHRes(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmdStack(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.ShellCmdStack(System.String,System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Sideload(System.String,System.Int32)">
            <summary>
             Sideloads a rom
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The recovery must support this function
            </summary>
            <param name="localPath">Local path (c:\path\to\rom.zip)</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.TCPIP(System.Int32)">
            <summary>
             Restart adbd daemon listen on given tcp port
            </summary>
            <param name="port">port</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.UnInstall(System.String,System.Boolean)">
            <summary>
             UnInstall an APK on the Device
            </summary>
            <param name="package">package name e.g. com.example.package</param>
            <param name="keepData">keeps the cache and userdata</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.UnRoot">
            <summary>
             Restarts adb daemon without root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.USB">
            <summary>
             Restart adbd daemon listen on USB
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBase.Verity(AndroidCtrl.IDDMVerity)">
            <summary>
             Dis-/Enable dm-verity on USERDEBUG builds
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input">
            <summary>
             Input is the general class to send some "input" commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.KeyEvent(AndroidCtrl.IDKeyEvent)">
            <summary>
             Sends a single keyevent to the device
            </summary>
            <param name="key">IDKeyEvent value to send</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.KeyEvent(AndroidCtrl.IDKeyEvent,System.Boolean)">
            <summary>
             Sends a single keyevent, with the ability to mark it as --longpress, to the device
            <para/>*NOTE*
            <para/>The --longpress parameter is not supported on all android devices
            </summary>
            <param name="key">IDKeyEvent value to send</param>
            <param name="longPress">bool</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.KeyEvent(AndroidCtrl.IDKeyInputSource,AndroidCtrl.IDKeyEvent,System.Boolean)">
            <summary>
             Sends a single keyevent, with the ability to mark it as --longpress, to the given device source
            <para/>*NOTE*
            <para/>The --longpress parameter is not supported on all android devices
            <para/>This method is on some devices buggy, if u get always false as return, use KeyEvent(IDKeyEvent key, bool longPress) or KeyEvent(IDKeyEvent key)
            </summary>
            <param name="source">IDKeyInputSource source to use</param>
            <param name="key">IDKeyEvent value to send</param>
            <param name="longPress">bool</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.KeyEventStack(System.Collections.Generic.IEnumerable{AndroidCtrl.IDKeyEvent})">
            <summary>
             Sends a stack of keyevents to the device
            <para/>*NOTE*
            <para/>Between the keyevents is an delay of 150 ms
            </summary>
            <param name="keys">IDKeyEvents to send</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.KeyEventStack(System.Collections.Generic.IEnumerable{AndroidCtrl.DataModelKeyEvent})">
            <summary>
             Sends a stack of DataModelKeyEvent's to the device
            <para/>*NOTE*
            <para/>Between the keyevents is an delay of 150 ms
            </summary>
            <param name="keys">IDKeyEvents to send</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Press">
            <summary>
             Sends the press event to the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Press(AndroidCtrl.IDKeyInputSource)">
            <summary>
             Sends the press event to the given device source
            </summary>
            <param name="source">IDKeyInputSource source to use</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Roll(System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as roll event to the device
            </summary>
            <param name="dx">dx coordinate</param>
            <param name="dy">dy coordinate</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Roll(AndroidCtrl.IDKeyInputSource,System.Int32,System.Int32)">
            <summary>
             Sends the given dx and dy as roll event to the given device source
            </summary>
            <param name="source">IDKeyInputSource source to use</param>
            <param name="dx">dx coordinate</param>
            <param name="dy">dy coordinate</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Swipe(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x1, y1, x2, y2 as swipe event to the device
            </summary>
            <param name="x1">x1 coordinate</param>
            <param name="y1">y1 coordinate</param>
            <param name="x2">x2 coordinate</param>
            <param name="y2">y2 coordinate</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Swipe(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x1, y1, x2, y2 as swipe event with the given duration (ms) to the device
            <para/>*NOTE*
            <para/>duration = 0 implies that the duration parameter is not used
            </summary>
            <param name="x1">x1 coordinate</param>
            <param name="y1">y1 coordinate</param>
            <param name="x2">x2 coordinate</param>
            <param name="y2">y2 coordinate</param>
            <param name="duration">duartion (ms) it will take to swipe, 0 implies that no duration is used</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Swipe(AndroidCtrl.IDKeyInputSource,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x1, y1, x2, y2 as swipe event with the given duration (ms) to the given device source
            <para/>*NOTE*
            <para/>duration = 0 implies that the duration parameter is not used
            </summary>
            <param name="source">IDKeyInputSource source to use</param>
            <param name="x1">x1 coordinate</param>
            <param name="y1">y1 coordinate</param>
            <param name="x2">x2 coordinate</param>
            <param name="y2">y2 coordinate</param>
            <param name="duration">duartion (ms) it will take to swipe, 0 implies that no duration is used</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Tap(System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as touch event to the device
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Tap(AndroidCtrl.IDKeyInputSource,System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as touch event to the given device source
            </summary>
            <param name="source">IDKeyInputSource source to use</param>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Text(System.String)">
            <summary>
             Sends the given string as text event to the device
            </summary>
            <param name="text">string to send</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Text(AndroidCtrl.IDKeyInputSource,System.String)">
            <summary>
             Sends the given string as text event to the given device source
            </summary>
            <param name="source">IDKeyInputSource source to use</param>
            <param name="text">string to send</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.SQLite.Options">
            <summary>
             This class is designed to define the needed sqlite3 options
            <para>*NOTE* This class can only be used if u have an "Open()" connection! U can check this with the "IsOpen" parameter.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Bail">
            <summary>
             .bail (Stop after hitting an error.  Default OFF)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Echo">
            <summary>
             .echo (Turn command echo on or off)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Explain">
            <summary>
             .explain (Turn output mode suitable for EXPLAIN on or off.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Header">
            <summary>
             .header (Turn display of headers on or off.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Mode">
            <summary>
             .mode (Set output mode where Mode is one of:)
            <para>csv (Comma-separated values)</para>
            <para>column (Left-aligned columns.  (See .width))</para>
            <para>html (HTML code)</para>
            <para>insert (SQL insert statements for TABLE)</para>
            <para>line (One value per line)</para>
            <para>list (Values delimited by .separator string)</para>
            <para>tabs (Tab-separated values)</para>
            <para>tcl (TCL list elements)</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.NullValue">
            <summary>
             .nullvalue (Print STRING in place of NULL values)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Output">
            <summary>
             .output ("stdout" Send output to the commandline. | "/path/to/ur/file" Send the output to the give file.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Separator">
            <summary>
             .separator (Change separator used by output mode and .import)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Stats">
            <summary>
             .stats (Turn stats on or off)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Timer">
            <summary>
             .timer (Turn the CPU timer measurement on or off)
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.SQLite.QueryTools">
            <summary>
             This class give u access to some basic sql tools
            <para>*NOTE* This class is a helper class to build an sql query.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.QueryTools.Quote(System.String)">
            <summary>
             Quote
            </summary>
            <param name="str">field to quote</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.QueryTools.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
             Replace the field-output in "field", search for "s" and replace with "r"
            </summary>
            <param name="field">field for replace</param>
            <param name="s">search string</param>
            <param name="r">replacement string</param>
            <param name="quoteSR">if true "s" and "r" will be set in single-quotes (')</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.QueryTools.ReplaceNL(System.String)">
            <summary>
             Replace "\r" with "&lt;_R_&gt;" and "\n" with "&lt;_N_&gt;"
            </summary>
            <param name="field">field to replace</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.QueryTools.ReplaceNL(System.String,System.String,System.String)">
            <summary>
             Replace "\r" with the given "r" string and "\n" with the given "n" string.
            </summary>
            <param name="field">field to replace</param>
            <param name="r">Replacement for "\r" (Use no single-quotes ('))</param>
            <param name="n">Replacement for "\n" (Use no single-quotes ('))</param>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.SQLite.SQLite3">
            <summary>
             This is the main class to interact with the device internal SQLite3
            <para/>*NOTE*
            <para/>sqlite must be already installed on the device!
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Dispose">
            <summary>
             IDisposable
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.CmdTimeOut">
            <summary>
             Set the response timeout in milliseconds, the default value is 500
            <para>*NOTE* This timeout defines the maximum wait time for an line of output</para>
            <para>*NOTE* This value can only be set if there is no command in progress!</para>
            <para>*HINT* U can check this with IsDone</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.Exists">
            <summary>
             Checks if SQLite3 is installed. If so, it will return true otherwise it returns false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.IsDone">
            <summary>
             Return true if the last command is done otherwise it will return false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.IsOpen">
            <summary>
             Returns true if the database connection is established otherwise it returns false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.LastError">
            <summary>
             Returns the last error
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.PATH_SQLITE3">
            <summary>
             Set/Get the (full/physical) remote sqlite3 path
            <para>*NOTE* Switch this property ONLY if sqlite3 is NOT installed and placed somewhere on the device!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.UseSU">
            <summary>
             Set to true if u want to use sqlite3 with su rights
            <para>*NOTE* This value can only be set if no connection is established!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.Version">
            <summary>
             Returns the SQLite3 version number or "string.Empty"
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Cancel">
            <summary>
             Cancel the current operation
            <para>*NOTE* This method reopens the database! Coz we can't "cancel" an executed command, we have to close the current sqlite3 shell instance and start a new one.</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Close">
            <summary>
             Close the database connection
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromLine(System.String[],System.String)">
            <summary>
             Creates an Key-Array from the given data
            </summary>
            <param name="keyArr">Table header array</param>
            <param name="rawline">Raw SQL line</param>
            <returns>Dictionary&lt;string, string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromLine(System.String[],System.String[])">
            <summary>
             Creates an Key-Array from the given data
            </summary>
            <param name="keyArr">Table header array</param>
            <param name="rawLineArr">Raw SQL line</param>
            <returns>Dictionary&lt;string, string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromQuery(System.String[])">
            <summary>
             Creates an List&lt;Dictionary&lt;string, string&gt;&gt; from the given query data
            <para>*NOTE* This query is auto-terminated with an ";"</para>
            <para>*NOTE* U can send an single string query like "SELECT * FROM somewhere"</para>
            <para>*NOTE* Or u can build an query like ("SELECT", "*", "FROM", "somewhere")</para>
            <para>*WARNING* Use "X'0D'" and "X'0A'" instead of "\r" and "\n" in ur requests! If u can't avoid an request with "\r" or "\n", use Execute() and parse the output ur self.</para>
            <para>*HINT* U can use QueryTools.ReplaceNL() to replace "\r" and "\n"</para>
            </summary>
            <param name="query">SQL-query</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromQuery(System.Collections.Generic.List{System.String})">
            <summary>
             Creates an List&lt;Dictionary&lt;string, string&gt;&gt; from the given output
            <para>*NOTE* "rawData" must be created with ".header ON" output (Options.Header = true) otherwise this method will fail!</para>
            <para>*IMPORTENT* The 1st line in the List&lt;string&gt; must be the table headers!</para>
            </summary>
            <param name="rawData">For example the return from ExecuteQuery()</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Execute(System.String)">
            <summary>
             Execute ur own sqlite3 command
            <para>*NOTE* Remember if u send an SQL-query terminate it with an ";" or simply use Query()</para>
            </summary>
            <param name="cmd">command</param>
            <returns>List&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.ExecuteQuery(System.String[])">
            <summary>
             Send the given SQL-query to the device
            <para>*NOTE* This query is auto-terminated with an ";"</para>
            <para>*NOTE* U can send an single string query like "SELECT * FROM somewhere"</para>
            <para>*NOTE* Or u can build an query like ("SELECT", "*", "FROM", "somewhere")</para>
            <para>*WARNING* Use "X'0D'" and "X'0A'" instead of "\r" and "\n" in ur requests! If u can't avoid an request with "\r" or "\n", use Execute() and parse the output ur self.</para>
            <para>*HINT* U can use QueryTools.ReplaceNL() to replace "\r" and "\n"</para>
            <para>*REASON* This function will cut the 1st line of output to guarantee that u only get the requested output, without the query-command u send.</para>
            <para>*REASON* In addition, this feature is really relevant for internal needs.</para>
            </summary>
            <param name="query">SQL-query</param>
            <returns>List&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Open(System.String)">
            <summary>
             Opens the remote DB for interaction
            </summary>
            <param name="database">remote DB path</param>
            <returns>bool</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.Options">
            <summary>
             Returns and if not exist, creates the Options instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.QueryTools">
            <summary>
             Returns and if not exist, creates the QueryTools instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.ActivityManager">
            <summary>
             ActivityManager is the general class to interact with the device ActivityManager.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.DumpHeap(System.String,System.String,System.Boolean,System.String)">
            <summary>
             This will create a heap dump of the given process.
            </summary>
            <param name="pid">Process id to snapshot</param>
            <param name="remoteFile">Remote dump file path</param>
            <param name="n">Use breaks (?)</param>
            <param name="user">User id or "current"</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.ForceStop(System.String,System.String)">
            <summary>
             Force stop everything associated with package
            </summary>
            <param name="package">App/Package to force-stop</param>
            <param name="user">User id or (all|current)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.Kill(System.String,System.String)">
            <summary>
             Kill all processes associated with package
            </summary>
            <param name="package">App/Package to kill</param>
            <param name="user">User id or (all|current)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.KillAll">
            <summary>
             Kill all background processes.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.Restart">
            <summary>
             Restart the user-space system.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.Start(System.String,System.String,System.String)">
            <summary>
             Starts the given activity with the given arguments
            </summary>
            <param name="package">Package/Activity to launch</param>
            <param name="pargs">Package arguments</param>
            <param name="aargs">Activity arguments</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.StartService(System.String,System.String)">
            <summary>
             Stop a Service
            </summary>
            <param name="intent">Service to start</param>
            <param name="user">User id or "current"</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.StopService(System.String,System.String)">
            <summary>
             Stop a Service
            </summary>
            <param name="intent">Service to stop</param>
            <param name="user">User id or "current"</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BuildProperties">
            <summary>
             BuildProperties is the general class to manage the build.prop
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BuildProperties.Get(System.String,System.Boolean)">
            <summary>
             Get the given build property if exists, if not it returns an empty string
            </summary>
            <param name="property">property name to get</param>
            <param name="dictionary">true for class internal dictinary search</param>
            <returns>string</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BuildProperties.GetProperties">
            <summary>
             Returns the class internal build property dictionary
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BuildProperties.Refresh">
            <summary>
             Returns the build properties and set the new dictionary to the class internal dictionary
            </summary>
            <returns>Dictionary string string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BuildProperties.Set(System.String,System.String)">
            <summary>
             Set a build property on the device
            </summary>
            <param name="key">Property key</param>
            <param name="val">Property value</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.BusyBox">
            <summary>
             BusyBox is the general class to interact with the device busybox.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Exists">
            <summary>
             Check if busybox is installed and working
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.PATH_BUSYBOX">
            <summary>
             Set/Get the (full/physical) remote busybox path
            <para>*NOTE* Switch this property ONLY if busybox is NOT installed and placed somewhere on the device!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Version">
            <summary>
             Return the current BusyBox version number
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Find">
            <summary>
             Returns and if not exist, creates the Find instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.HashFile(System.String,AndroidCtrl.IDHash)">
            <summary>
             Generate a hash value from the file path and IDHash
            </summary>
            <param name="remotePath">Remote file path</param>
            <param name="hash">IDHash default is md5</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.HexDump(System.String)">
            <summary>
             Gets the hexdump from the given file path
            </summary>
            <param name="remotePath">Remote file path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmd(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmd(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmd(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmdHRes(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmdHRes(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmdHRes(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Tar">
            <summary>
             Returns and if not exist, creates the Tar instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Tools">
            <summary>
             Return all BusyBox included tools
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.Find">
            <summary>
             Find is the general class to interact with busybox find.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.All(System.String,System.String)">
            <summary>
             Search everything that match the given item
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.BlockDeviceFile(System.String,System.String)">
            <summary>
             Search block device files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.CharacterDeviceFile(System.String,System.String)">
            <summary>
             Search character device files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.Directory(System.String,System.String)">
            <summary>
             Search directorys
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.File(System.String,System.String)">
            <summary>
             Search files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.Link(System.String,System.String)">
            <summary>
             Search symlinks
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.NamedPipe(System.String,System.String)">
            <summary>
             Search named pipes
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.UnixDomainSocket(System.String,System.String)">
            <summary>
             Search unix domain sockets
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.Tar">
            <summary>
             Tar is the general class to interact with busybox tar.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectory(System.String,AndroidCtrl.IDTar,System.String)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">Directory to compress</param>
            <param name="compression">Compression type</param>
            <param name="tarName">(optional) tar file name (without .tar, .tar.gz, etc.)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectoryList(System.String,System.Collections.Generic.List{System.String},AndroidCtrl.IDTar,System.String)">
            <summary>
             Create an compressed tar from the given file and directory names inside the given working directory
            </summary>
            <param name="remotePath">Remote working directory</param>
            <param name="list">List with file and directory names to compress</param>
            <param name="compression">Compression type</param>
            <param name="tarName">(optional) tar file name (without .tar, .tar.gz, etc.)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromFile(System.String,AndroidCtrl.IDTar,System.String)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">File to compress</param>
            <param name="compression">Compression type</param>
            <param name="tarName">(optional) tar file name (without .tar, .tar.gz, etc.)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.Extract(System.String,AndroidCtrl.IDTar,System.String)">
            <summary>
             Extract the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="compression">De-Compression type</param>
            <param name="extractTo">Remote extraction path
            <para>*NOTE* If this variable is null a new directory will be generated and the content of the tar file will be extracted to it</para>
            </param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ExtractList(System.String,System.Collections.Generic.List{System.String},AndroidCtrl.IDTar,System.String)">
            <summary>
             Extract the given files/directories from the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="list">List with file and directory names to de-compress</param>
            <param name="compression">De-Compression type</param>
            <param name="extractTo">Remote extraction path
            <para>*NOTE* If this variable is null a new directory will be generated and the content of the tar file will be extracted to it</para></param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.List(System.String)">
            <summary>
             List the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ShowFile(System.String,System.String,AndroidCtrl.IDTar)">
            <summary>
             Decompress a single file to stdout and return it as an List string
            <para>*NOTE* This will CURRENTLY ONLY work with UTF-8 encoded files, all other encodings will be destroyed while the transfer</para>
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="viewFile">File to view (Path example: Folder/file.txt or file.txt)</param>
            <param name="compression">De-Compression type</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Device">
            <summary>
             Device is the general class to interact with the device, here u find some pre-defined shell/busybox commands.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.ActivityManager">
            <summary>
             Returns and if not exist, creates the ActivityManager instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.BuildProperties">
            <summary>
             Returns and if not exist, creates the BuildProperties instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.BusyBox">
            <summary>
             Returns and if not exist, creates the BusyBox instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Daemon">
            <summary>
             Returns and if not exist, creates the Daemon instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Directories(System.String)">
            <summary>
             Returns a new Directories instance
            </summary>
            <param name="remoteDirectory">Remote directory to interact with</param>
            <returns>Directories</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Dmesg(System.String)">
            <summary>
             Read the dmesg from the device and write it to an file on the device and/or return the data as list string.
            </summary>
            <param name="remoteFilePath">Logfile device path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.DD(System.String,System.String)">
            <summary>
             DD
            </summary>
            <param name="input">InputFile</param>
            <param name="output">OutputFile</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.DD(System.String,System.String,System.String,System.String)">
            <summary>
             DD
            <para/>*NOTE*
            <para/>The arg1 and arg2 parameter are NOT auto quoted!
            </summary>
            <param name="input">InputFile</param>
            <param name="arg1"></param>
            <param name="output">OutputFile</param>
            <param name="arg2"></param>
            <returns>bool</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Dumpsys">
            <summary>
             Returns and if not exist, creates the Dumpsys instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Files(System.String)">
            <summary>
             Returns a new Files instance
            </summary>
            <param name="remoteFile">Remote file to interact with</param>
            <returns>Files</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.FileSystem">
            <summary>
             Returns a new FileSystem instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Forensics">
            <summary>
             Returns and if not exist, creates the Forensics instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Info">
            <summary>
             Returns an extended device info
            <para/>*NOTE*
            <para/>This method needs, depending on the device, a few seconds.
            </summary>
            <returns>DataModelDeviceInfo</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Input">
            <summary>
             Returns and if not exist, creates the Input instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Kmsg(System.String)">
            <summary>
             Write the kmsg or last_kmsg to an file on the device. Which one is written depends on the device.
            </summary>
            <param name="remoteFilePath">Logfile device path</param>
            <returns>bool</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.LogCat">
            <summary>
             Returns and if not exist, creates the LogCat instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Mount">
            <summary>
             Returns and if not exist, creates the Mount instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.OpenRecoveryScript">
            <summary>
             Returns a new OpenRecoveryScript instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.PackageManager">
            <summary>
             Returns and if not exist, creates the PackageManager instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Phone">
            <summary>
             Returns and if not exist, creates the Phone instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Providers">
            <summary>
             Returns and if not exist, creates the Providers instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Screen">
            <summary>
             Returns and if not exist, creates the Screen instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.SQLite3">
            <summary>
             Returns a new SQLite3 instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Su">
            <summary>
             Returns and if not exist, creates the Su instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Uptime">
            <summary>
             Returns the Uptime
            <para/>*NOTE*
            <para/>if busybox is not installed DataModelUptime.Load will be empty
            </summary>
            <returns>DataModelUptime or null</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Wipe">
            <summary>
             Returns and if not exist, creates the Wipe instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Dumpsys">
            <summary>
             Dumpsys is the general class to interact with the device dumpsys
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Battery">
            <summary>
             Return the current battery dump
            </summary>
            <returns>DataModelDumpsysBattery or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Meminfo_v4xx">
            <summary>
             Returns the current meminfo dump
            <para>*NOTE* This method works only on Android 4.x.x devices!</para>
            </summary>
            <returns>DataModelDumpsysMeminfo_4xx or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.MeminfoPackage(System.String)">
            <summary>
             Returns the current meminfo dump about the given package name
            </summary>
            <param name="package">Package name</param>
            <returns>DataModelDumpsysMeminfoPackage or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.RawDump(System.String)">
            <summary>
             Returns the raw dump
            </summary>
            <param name="dump">Dump part e.g. meminfo, battery, etc.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.FileSystem">
            <summary>
             FileSystem is the general class to read/parse the filesystem overview from the device.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.FileSystem.Parse">
            <summary>
             Parse the Read output into a human readable class
            </summary>
            <returns>IEnumerable&lt;DataModelFileSystemItem&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.FileSystem.ParseItem(System.String)">
            <summary>
             Parse the ReadRaw() output into a human readable class
            </summary>
            <param name="rawItem">the raw item from the shell output</param>
            <returns>DataModelFileSystemItem</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.FileSystem.ReadRaw">
            <summary>
             Read the filesystem overview on from the device (shell mode = df), (busybox mode = df -Pakh)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Forensics">
            <summary>
             This class give u access to basic forensic tools
            <para>*NOTE* This class require root access!</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.Kill(System.String,System.String)">
            <summary>
             This will use (kill -10 PID) to create a hprof file from the given PID
             <para>*NOTE* The file can be found at /data/misc/heap-dump-tm"timestamp"-pid"PID".hprof</para>
             <para>*NOTE* This will not work in newer versions of android, in this case i can refer to DumpHeap().</para>
            </summary>
            <param name="PID">Process id to kill</param>
            <param name="signal">Signal, default is -10</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.DumpHeap(System.String,System.String,System.Boolean,System.String)">
            <summary>
             This will create a heap dump of the given process.
            </summary>
            <param name="PID">Process id to snapshot</param>
            <param name="remoteFile">Remote dump file path</param>
            <param name="n">Use breaks (?)</param>
            <param name="user">User id or "current"</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.PartitionCopy(System.String,System.String)">
            <summary>
             This will create a copy of the given mountpoint (dd if=/path/to/mountpoint of=/path/to/backup.dd)
            </summary>
            <param name="mountPoint">Mountpoint to copy</param>
            <param name="remoteBackupPath">Backup file path on the device</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.RemoveLockScreenGestureStock">
            <summary>
             Try to remove the lockscreen gesture key file on the device
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.RemoveLockScreenGestureCyanogenmod">
            <summary>
             Try to remove the lockscreen gesture key file on the device
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.TryExtractData(System.String)">
            <summary>
             This will try to extract some dbs from the device to the given path
             *NOTE* Depending on the device and the size of the directories, this can take a while.
            </summary>
            <param name="localDirectoryPath">Local backup path</param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.LogCat">
            <summary>
             LogCat is the general class to interact with logcat.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.ParseLog(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
             Returns a parsed object list of the given raw logcat output
            </summary>
            <param name="rawData">Logcat raw data</param>
            <param name="_long">Define that "-v long" was used to create the log</param>
            <returns>IEnumerable&lt;DataModelLogCat&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.ParseLogFile(System.String,System.Boolean)">
            <summary>
             Returns a parsed object list of the given logfile
            </summary>
            <param name="localFile">Local file path</param>
            <param name="_long">Define that "-v long" was used to create the log</param>
            <returns>IEnumerable&lt;DataModelLogCat&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.RawLog(System.Boolean)">
            <summary>
             Returns the complete raw logcat output
            </summary>
            <param name="_long">Define that "-v long" is used to create the log</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.RealTime(System.String)">
            <summary>
             Returns a new LogCat instance
            </summary>
            <param name="args">Arguments (events|main|radio|system|etc.)</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.ToLocalFile(System.String,System.Boolean)">
            <summary>
             Write the logcat to the given local file location
            </summary>
            <param name="localFilePath">Logfile local path</param>
            <param name="_long">Define that "-v long" is used to create the log</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.ToRemoteFile(System.String,System.Boolean)">
            <summary>
             Write the logcat to the given remote file location
            </summary>
            <param name="remoteFilePath">Logfile device path</param>
            <param name="_long">Define that "-v long" is used to create the log</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.OpenRecoveryScript">
            <summary>
             This class creates an OpenRecoveryScript file with the defined values and write it to the device.
             <para>*NOTE* This class needs root access on the device</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupAndroidSecure">
            <summary>
             Set the A = .android_secure param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupBoot">
            <summary>
             Set the B = Boot (kernel) partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupCache">
            <summary>
             Set the C = Cache partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupData">
            <summary>
             Set the D = Data partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSdExt">
            <summary>
             Set the E = sd-ext partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupNoMD5sums">
            <summary>
             Set the M = Do not create MD5sums param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupCompression">
            <summary>
             Set the O = Enable backup compression param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupRecovery">
            <summary>
             Set the R = Recovery partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSystem">
            <summary>
             Set the S = System partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSpecial1">
            <summary>
             Set the 1 = Special partition 1 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSpecial2">
            <summary>
             Set the 2 = Special partition 2 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSpecial3">
            <summary>
             Set the 3 = Special partition 3 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupDirectory">
            <summary>
             Set the foldername param (Optional) NO "/" at the beginning
             <para>*HINT* Folder name in the devices backups folder, not the full path</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.WipeCache">
            <summary>
             Set the wipe cache param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.WipeDalvik">
            <summary>
             Set the wipe dalvik-cache param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.WipeData">
            <summary>
             Set the wipe data param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreAndroidSecure">
            <summary>
             Set the A = .android_secure param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreBoot">
            <summary>
             Set the B = Boot (kernel) partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreCache">
            <summary>
             Set the C = Cache partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreData">
            <summary>
             Set the D = Data partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSdExt">
            <summary>
             Set the E = sd-ext partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreNoMD5sums">
            <summary>
             Set the M = Do not check MD5sums param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreRecovery">
            <summary>
             Set the R = Recovery partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSystem">
            <summary>
             Set the S = System partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSpecial1">
            <summary>
             Set the 1 = Special partition 1 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSpecial2">
            <summary>
             Set the 2 = Special partition 2 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSpecial3">
            <summary>
             Set the 3 = Special partition 3 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreDirectory">
            <summary>
             Set the foldername param
             <para>*HINT* The full path to the backup folder (/mnt/sdcard/(Backup provider)/BACKUPS/(Device serial number)/foldername)</para>
             <para>*HINT* If u only set these path all backuped partitions will be restored.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.InstallFilePath">
            <summary>
             Set the zip file path (/path/to/romfile.zip)
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.OpenRecoveryScript.WriteScriptToDevice">
            <summary>
             Creates the openrecoveryscript file in /cache/recovery/ on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.OpenRecoveryScript.GetBackupArgs">
            <summary>
             Get the configured values into a single string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.OpenRecoveryScript.GetRestoreArgs">
            <summary>
             Get the configured values into a single string
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.PackageManager">
            <summary>
             PackageManager is the general class to interact with the device PackageManager.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Block(System.String,System.String)">
            <summary>
             Blocks the given package.
            <para>*NOTE* This method is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Clear(System.String,System.String)">
            <summary>
             Deletes all data associated with the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Disable(System.String,System.String)">
            <summary>
             Disables the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.DisableUser(System.String,System.String)">
            <summary>
             Disables the given userID for the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.DisableUntilUsed(System.String,System.String)">
            <summary>
             Disable until used
            <para>*NOTE* This method is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Dump(System.String)">
            <summary>
             Returns the system state associated with the given package.
            </summary>
            <param name="package">Package name</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Enable(System.String,System.String)">
            <summary>
             Enables the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.GetInstallLocation">
            <summary>
             Return the current install location
            </summary>
            <returns>IDInstallLocation</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Install(System.String,System.String)">
            <summary>
            Installs the given package
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            </summary>
            <param name="packagePath">remote package path</param>
            <param name="args">arguments</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListFeatures">
            <summary>
             Returns all features of the system
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListInstrumentation(System.String)">
            <summary>
             Returns the installed test packages
            </summary>
            <param name="package">Package name</param>
            <returns>IEnumerable&lt;DataModelPackageManagerInstrumentation&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListLibraries">
            <summary>
             Returns all installed libraries
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListPackages(System.String)">
            <summary>
             Returns the installed package(s) info(s)
            </summary>
            <param name="package">Package name</param>
            <returns>IEnumerable&lt;DataModelPackageManagerPackage&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListPermissionGroups">
            <summary>
             Returns all permission groups
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListPermissions">
            <summary>
             Returns all permissions and it's info's
            </summary>
            <returns>IEnumerable&lt;DataModelPackageManagerPermission&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Path(System.String)">
            <summary>
             Gets the APK path from given package
            </summary>
            <param name="package">Package</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.SetInstallLocation(AndroidCtrl.IDInstallLocation)">
            <summary>
             Sets the given install location
            </summary>
            <param name="location">IDInstallLocation</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Unblock(System.String,System.String)">
            <summary>
             Unblocks the given package.
            <para>*NOTE* This method is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Uninstall(System.String,System.Boolean)">
            <summary>
             Uninstalls the given package
            </summary>
            <param name="package">Package name</param>
            <param name="keepData">Keep package data</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Phone">
            <summary>
             Phone is the general class to interact with the phone/sms part on the device
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.AddContact(System.String,System.String,System.String)">
            <summary>
             Adds an new contact on the device
             <para>*NOTE* If the device is locked, this function will sometimes freeze the current thread.</para>
            </summary>
            <param name="name">Contact name</param>
            <param name="number">Contact number</param>
            <param name="email">Contact email</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.Call(System.String)">
            <summary>
             Calls the given number on the device
             <para>*NOTE* If the device is locked, this function will sometimes freeze the current thread.</para>
            </summary>
            <param name="number">Number to call (+49123456 or 0049123456)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.Dial(System.String)">
            <summary>
             Dials the given number on the device
             <para>*NOTE* If the device is locked, this function will sometimes freeze the current thread.</para>
            </summary>
            <param name="number">Number to dial (+49123456 or 0049123456)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.SendSMS(System.String,System.String)">
            <summary>
             Send the given text as SMS from the device to the given number
             <para>*NOTE* This will only work if the display is on and NOT locked or if the display is off and NOT locked</para>
             <para>*NOTE* If the device is locked, this function will sometimes freeze the current thread until its unlocked.</para>
            </summary>
            <param name="receiver">Number of recipient (+49123456) or (0049123456)</param>
            <param name="text">Text to send *NOTE* 160 signs are 1 SMS</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Providers.Providers">
            <summary>
             This is the main class to interact with the device "Providers" such as contacts, sms, etc.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Providers.Providers.Contacts">
            <summary>
             Returns and if not exist, creates the Contacts instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Providers.Providers.Telephony">
            <summary>
             Returns and if not exist, creates the Telephony instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Providers.Telephony">
            <summary>
             This is the main class to interact with the device telephony provider database
            <para>*NOTE* This class needs min. 6 sec. to load the needed tables from the mmssms.db on the device.</para>
            <para>*NOTE* If the device is via W-Lan/Lan connected, it can take up to 12 sec. to load the needed tables.</para>
            <para>*HINT* If u can't load the data from the device u can try to change the "TimeOut".</para>
            <para>*NOTE* This class require root access!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Providers.Telephony.DatabasePathSmsMms">
            <summary>
             Get/Set the remote sms/mms database path
            <para>*NOTE* The default path is "/data/data/com.android.providers.telephony/databases/mmssms.db"</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Providers.Telephony.IsInitialized">
            <summary>
             Return true if all needed tables are successfully stored in it's tmp vars, otherwise it will return false.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Providers.Telephony.timeout">
            <summary>
             Set the response timeout in milliseconds, the default value is 500
            <para>*NOTE* This timeout defines the maximum wait time for an line of output</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Telephony.GetParts">
            <summary>
             Returns the complete part table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Telephony.GetSms">
            <summary>
             Returns the complete sms table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Telephony.GetSmsByPhoneNumber(System.String)">
            <summary>
             Return all sms from/to the given adress (phone number).
            </summary>
            <param name="contactNumber">address (phone number)</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Telephony.GetSmsByRawContactID(System.Int32)">
            <summary>
             Return all sms from/to the given person (raw_contact_id).
            </summary>
            <param name="rawContactID">person (raw_contact_id)</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Telephony.GetSmsByRawContactID(System.Collections.Generic.List{System.Int32})">
            <summary>
             Return all sms from/to the given persons (raw_contact_ids).
            </summary>
            <param name="rawContactIDs">persons (raw_contact_ids)</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Telephony.GetSmsByThreadID(System.Int32)">
            <summary>
             Return all sms from/to the given thread_id.
            </summary>
            <param name="threadID">thread_id</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Telephony.GetThreads">
            <summary>
             Returns the complete threads table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Telephony.LoadData">
            <summary>
             Loads the needed tables in it's tmp vars.
            <para>*NOTE* U need to call this method ONLY if "IsInitialized" is false</para>
            <para>*NOTE* If "IsInitialized" is still false after manually call this method pls report this issue.</para>
            <para>*REPORT VIA* http://forum.xda-developers.com/showthread.php?t=2772502</para>
            <para>*REPORT VIA* webmaster@sebastiangrinke.info</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Providers.Contacts">
            <summary>
             This is the main class to interact with the device contacts provider database
            <para>*NOTE* This class needs min. 6 sec. to load the needed tables from the contacts2.db on the device.</para>
            <para>*NOTE* If the device is via W-Lan/Lan connected, it can take up to 12 sec. to load the needed tables.</para>
            <para>*HINT* If u can't load the data from the device u can try to change the "TimeOut".</para>
            <para>*NOTE* This class require root access!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Providers.Contacts.DatabasePath">
            <summary>
             Get/Set the remote database path
            <para>*NOTE* The default path is "/data/data/com.android.providers.contacts/databases/contacts2.db"</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Providers.Contacts.IsInitialized">
            <summary>
             Return true if all needed tables are successfully stored in it's tmp vars, otherwise it will return false.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Providers.Contacts.timeout">
            <summary>
             Set the response timeout in milliseconds, the default value is 500
            <para>*NOTE* This timeout defines the maximum wait time for an line of output</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetCalls">
            <summary>
             Returns the complete calls table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetCallsByContactID(System.Int64)">
            <summary>
             Return all calls from/to the given contact_id.
            </summary>
            <param name="contactID">contact_id</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetCallsByPhoneNumber(System.String)">
            <summary>
             Return all calls from/to the given phone number.
            </summary>
            <param name="contactPhoneNumber">The contact phone number</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetCallsByRawContactID(System.Int64)">
            <summary>
             Return all calls from/to the given raw_contact_id.
            </summary>
            <param name="rawContactID">raw_contact_id</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactAddress(System.Int64)">
            <summary>
             Returns the contact postal address based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsDataField&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactEmails(System.Int64)">
            <summary>
             Returns the contact emails based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsDataField&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactEvents(System.Int64)">
            <summary>
             Returns the contact events based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsEvent&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactData">
            <summary>
             Returns the complete data table.
            </summary>
            <returns>List&lt;DataModelContactsDataField&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactDataByContactID(System.Int64)">
            <summary>
             Returns the contact data which is assigned to the given contact_id.
            </summary>
            <param name="contactID">contact_id</param>
            <returns>List&lt;DataModelContactsDataField&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactDataByContactID(System.Int64,System.Int64)">
            <summary>
             Returns the contact data which is assigned to the given contact_id and matches the given mimetype_id.
            </summary>
            <param name="contactID">contact_id</param>
            <param name="mimeTypeID">mimetype_id</param>
            <returns>List&lt;DataModelContactsDataField&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactDataByContactID(System.Int64,AndroidCtrl.IDAndroidCursor)">
            <summary>
             Returns the contact data which is assigned to the given contact_id and matches the given IDAndroidCursor.
            </summary>
            <param name="contactID">contact_id</param>
            <param name="cursorID">IDAndroidCursor</param>
            <returns>List&lt;DataModelContactsDataField&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactDataByRawContactID(System.Int64)">
            <summary>
             Returns the contact data which is assigned to the given raw_contact_id.
            </summary>
            <param name="rawContactID">raw_contact_id</param>
            <returns>List&lt;DataModelContactsDataField&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactDataByRawContactID(System.Int64,System.Int64)">
            <summary>
             Returns the contact data which is assigned to the given raw_contact_id and matches the given mimetype_id.
            </summary>
            <param name="rawContactID">raw_contact_id</param>
            <param name="mimeTypeID">mimetype_id</param>
            <returns>List&lt;DataModelContactsDataField&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactDataByRawContactID(System.Int64,AndroidCtrl.IDAndroidCursor)">
            <summary>
             Returns the contact data which is assigned to the given raw_contact_id and matches the given IDAndroidCursor.
            </summary>
            <param name="rawContactID">raw_contact_id</param>
            <param name="cursorID">IDAndroidCursor</param>
            <returns>List&lt;DataModelContactsDataField&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactGroupMemberships(System.Int64)">
            <summary>
             Returns the contact group ids based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsGroup&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactIDByRawContactID(System.Int64)">
            <summary>
             Returns the contact_id which matches with the given raw_contact_id otherwise it will return -1.
            </summary>
            <param name="rawContactID">raw_contact_id</param>
            <returns>contact_id or -1</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactIdentities(System.Int64)">
            <summary>
             Returns the contact identities based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsIdentity&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactIMs(System.Int64)">
            <summary>
             Returns the contact instant messenger ids based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsIM&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactName(System.Int64)">
            <summary>
             Returns the contact name based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>DataModelContactsName or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactNicknames(System.Int64)">
            <summary>
             Returns the contact nicknames based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsNickname&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactNotes(System.Int64)">
            <summary>
             Returns the contact notes based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsNote&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactOrganization(System.Int64)">
            <summary>
             Returns the contact organization based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>DataModelContactsOrganization or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactPhoneNumbers(System.Int64)">
            <summary>
             Returns the contact phone numbers based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsPhone&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactPhotos(System.Int64)">
            <summary>
             Returns the contact photos if exists (Format should be JPEG)
            </summary>
            <param name="contactID">contact_id</param>
            <returns>List&lt;DataModelContactsPhoto&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactPhotoByRawContactID(System.Int64)">
            <summary>
             Returns the contact photo if exists (Format should be JPEG)
            </summary>
            <param name="rawContactID">raw_contact_id</param>
            <returns>DataModelContactsPhoto or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactPhotoByRawContactID(System.Collections.Generic.List{System.Int64})">
            <summary>
             Returns the contact photos if exists (Format should be JPEG)
            </summary>
            <param name="rawContactIDs">raw_contact_id's</param>
            <returns>List&lt;DataModelContactsPhoto&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactRelations(System.Int64)">
            <summary>
             Returns the contact relations based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsRelation&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactSipAddress(System.Int64)">
            <summary>
             Returns the contact sip-addresses based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsSipAddress&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContactWebsites(System.Int64)">
            <summary>
             Returns the contact websites based on its contact id (not raw_contact_id) or null
            </summary>
            <param name="contactID">contact id</param>
            <returns>List&lt;DataModelContactsWebsite&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetContacts">
            <summary>
             Returns the complete contacts table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetGroup(System.String)">
            <summary>
             Return the group ID if exists otherwise it will return "-1"
            </summary>
            <param name="groupName">The group string like "family", "friends", etc.</param>
            <returns>int</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetGroup(System.Int64)">
            <summary>
             Return the group if the given ID exists otherwise it will return "null".
            </summary>
            <param name="groupID">The group long ID</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetGroups">
            <summary>
             Returns the complete groups table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetMimeType(System.String)">
            <summary>
             Return the mimetype ID if exists otherwise it will return "-1"
            </summary>
            <param name="mimetype">The mimetype like "vnd.android.cursor.item/name"</param>
            <returns>long</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetMimeType(AndroidCtrl.IDAndroidCursor)">
            <summary>
             Return the mimetype ID if exists otherwise it will return "-1"
            </summary>
            <param name="cursorID">IDAndroidCursor</param>
            <returns>long</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetMimeType(System.Int64)">
            <summary>
             Return the mimetype if the given ID exists otherwise it will return "null".
            </summary>
            <param name="mimetypeID">The mimetype long ID</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetMimeTypes">
            <summary>
             Returns the complete mimetypes table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByContactID(System.Int64)">
            <summary>
             Returns the raw_contact_id's which matches with the given website
            </summary>
            <param name="contactID">contact website</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByDisplayName(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given display name
            </summary>
            <param name="contactName">contact name</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByEmailAdress(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given email adress
            </summary>
            <param name="contactEmailAdress">contact email adress</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByGroupMembership(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given email adress
            </summary>
            <param name="contactGroupName">contact group name</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByGroupMembership(System.Int64)">
            <summary>
             Returns the contact id's which matches with the given email adress
            </summary>
            <param name="contactGroupID">contact group ID</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByIM(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given IM id
            </summary>
            <param name="contactIM">contact instant-messenger id</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByNickname(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given nickname
            </summary>
            <param name="contactNickname">contact nickname</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByOrganization(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given organization
            </summary>
            <param name="contactOrganization">contact organization</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByPhoneNumber(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given phone number
            </summary>
            <param name="contactNumber">contact number</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContactIDsByWebsite(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given website
            </summary>
            <param name="contactWebsite">contact website</param>
            <returns>List&lt;long&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.GetRawContacts">
            <summary>
             Returns the complete raw_contacts table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Providers.Contacts.LoadData">
            <summary>
             Loads the needed tables in it's tmp vars.
            <para>*NOTE* U need to call this method ONLY if "IsInitialized" is false</para>
            <para>*NOTE* If "IsInitialized" is still false after manually call this method pls report this issue.</para>
            <para>*REPORT VIA* http://forum.xda-developers.com/showthread.php?t=2772502</para>
            <para>*REPORT VIA* webmaster@sebastiangrinke.info</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen">
            <summary>
             Screen is the general class to interact with the device screen.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.IsOn">
            <summary>
             Check if the device screen is currently on or off
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.OnOff">
            <summary>
             Turns the screen on or off, depending on current state.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Record(System.String,System.String,System.String,System.Boolean)">
            <summary>
             Starts an screenrecord on the device
            </summary>
            <param name="remotePath">File path to store (mp4)</param>
            <param name="timeLimit">Recording time limit (sec)</param>
            <param name="size">Recoding size (1280x720)</param>
            <param name="rotate">Rotate 90 degrees</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Shot(System.String,System.Int32)">
            <summary>
             Make a screenshot on the device (Filename example: Screenshot_dd.MM.yyyy_hh-mm-ss.png)
            </summary>
            <param name="remoteDirectory">Remote directory path</param>
            <param name="displayID">Display ID default is 0</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Shot(System.IO.Stream,System.Int32)">
            <summary>
             Make a screenshot from the device
            <para/>*NOTE*
            <para/>This method works only on devices which support adb exec-out!
            </summary>
            <param name="stream">stream</param>
            <param name="displayID">Display ID default is 0</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Swipe(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x1, y1, x2, y2 as swipe event to the device
            </summary>
            <param name="x1">x1 coordinate</param>
            <param name="y1">y1 coordinate</param>
            <param name="x2">x2 coordinate</param>
            <param name="y2">y2 coordinate</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Swipe(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x1, y1, x2, y2 as swipe event with the given duration (ms) to the device
            <para/>*NOTE*
            <para/>duration = 0 implies that the duration parameter is not used
            </summary>
            <param name="x1">x1 coordinate</param>
            <param name="y1">y1 coordinate</param>
            <param name="x2">x2 coordinate</param>
            <param name="y2">y2 coordinate</param>
            <param name="duration">duartion (ms) it will take to swipe, 0 implies that no duration is used</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Tap(System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as touch event to the device
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Unlock">
            <summary>
             Unlocks the device if no security mechanism is active.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.UnlockWithPin(System.String)">
            <summary>
             Sends the given unlock-pin/password to the device
            </summary>
            <param name="pin">Unlock-Pin</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Wipe">
            <summary>
             This class give u access to some predefined wipe methods
             <para>*NOTE* Parts of these class require root access!</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Cache">
            <summary>
             Wipe the Cache directory/mount
             <para>*NOTE* This method requires root access on the device.</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Dalvik">
            <summary>
             Wipe the Dalvik-Cache
             <para>*NOTE* This method requires root access on the device.</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Data">
            <summary>
             Wipe the Data directory/mount
             <para>*NOTE* This method requires root access on the device.</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Tmp">
            <summary>
             Wipe the System-Tmp directory "/data/local/tmp/"
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Daemon">
            <summary>
             Daemon is the general class to manage the adb daemon on the device.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Daemon.IsRoot">
            <summary>
             Check if adbd have root rights on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Daemon.PATH_ADBD">
            <summary>
             Set/Get the (full/physical) remote busybox path
            <para/>*NOTE*
            <para/>Switch this property ONLY if adbd is NOT inside the given path!
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.Restart(System.Int32)">
            <summary>
             Restart adbd on the device
            <para/>*NOTE*
            <para/>If port is empty or 0, NO port value will be set to the device. If port is -1 the device will restart in USB mode.
            </summary>
            <param name="port">restarts the adbd on the given port</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.Root">
            <summary>
             Restart adbd with root permissions on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.Stop">
            <summary>
             Stop adbd on the device
            <para/>*NOTE*
            <para/>After a call to this function adb is no longer available and u need to manually restart the daemon on the device.
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.UnRoot">
            <summary>
             Restart adbd without root permissions on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.AddBuildPropEntries">
            <summary>
             Adds "ro.adb.secure=1", "service.adb.root=0" and "service.adb.tcp.port=-1" to the default.prop so that adbd is able to start in root mode
            <para/>*NOTE*
            <para/>This may not work on stock roms!
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Directories">
            <summary>
             Directories is the general class for directory interactions on/with the device.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Directories.Exists">
            <summary>
             Check if the directory exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Directories.Name">
            <summary>
             Returns only the directoryname without any path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Directories.Parent">
            <summary>
             Returns the parent directory as Directories or if no parent exists null
            </summary>
            <returns>Directories</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Directories.Size">
            <summary>
             Returns the directorysize in byte
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Directories.CallBack">
            <summary>
             CallBack defines the output function
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Chmod(System.String)">
            <summary>
             Sets the given chmod for this directory on the device.
             <para>*NOTE* U can also set an unix chmod (rwxrwxrwx). If u want to set an unix format u must use the full 9 chars.</para>
             <para>*NOTE* Like this examples: (rw-rwx-wt), (rwsrwsrwt), (rw-r--r--)</para>
             <para>*HINT* Usefull if u use the directory parser and want to copy some permissions to other files/folders.</para>
             <para>*HINT* This function uses ToolBox.ConvertUnixChmod() to convert the unix format to an number.</para>
            </summary>
            <param name="chmod">The chmod to set</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Chown(System.String,System.String,System.Boolean)">
            <summary>
             Own this directory with given owner and group id
            <para>*NOTE* This method needs root access on the device</para>
            </summary>
            <param name="owner">New owner</param>
            <param name="group">New group</param>
            <param name="recursive">Recursive (by default true)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.CopyTo(System.String)">
            <summary>
             Copy this directory to the given location on the device
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Create">
            <summary>
             Creates an empty directory on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Delete">
            <summary>
             Delete the given folder and its content on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.GetDirectories">
            <summary>
             Returns only the sym-/directories in this directory as a parsed DataModelFileSystemItem list
            <para>*NOTE* This method uses the callback also!</para>
            </summary>
            <returns>IEnumerable&lt;DataModelFileSystemItem&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.GetDirectoriesRaw">
            <summary>
             Returns only the sym-/directories in this directory as a simple raw string list.
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.GetFiles">
            <summary>
             Returns only the sym-/files in this directory as a parsed DataModelFileSystemItem list
            <para>*NOTE* This method uses the callback also!</para>
            </summary>
            <returns>IEnumerable&lt;DataModelFileSystemItem&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.GetFilesRaw">
            <summary>
             Returns only the sym-/files in this directory as a simple raw string list.
            </summary>
            <returns>IEnumerable&lt;string&gt;</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.LinkTo(System.String,System.Boolean)">
            <summary>
             Create an sym-/hardlink on the given position
            </summary>
            <param name="destination">link destination (Must be a directory)</param>
            <param name="symlink">true = symlink | false = hardlink</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.MoveTo(System.String)">
            <summary>
             Move this directory to the given location on the device
            </summary>
            <param name="destination">Remote destination folder path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Parse">
            <summary>
             Parse the ReadRaw() output into a human readable class
            <para>*NOTE* This method uses the callback also!</para>
            </summary>
            <returns>IEnumerable&lt;DataModelFileSystemItem&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.ParseItem(System.String)">
            <summary>
             Parse a single raw string item into a human readable class
            </summary>
            <param name="rawItem">the raw item from the shell output</param>
            <returns>DataModelFileSystemItem or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.ParseInfo">
            <summary>
             Parse the RawInfo() output into a human readable class
            </summary>
            <returns>DataModelFileSystemItem or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.PullTo(System.String)">
            <summary>
             Download this directory from the device to the given location
            <para>*NOTE* If u created the instance with su=true u also need adbd running as root to get this method work.</para>
            </summary>
            <param name="destination">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.PushFrom(System.String)">
            <summary>
             Upload this directory to the device from the given location
            <para>*NOTE* If u created the instance with su=true u also need adbd running as root to get this method work.</para>
            </summary>
            <param name="source">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.RawInfo">
            <summary>
             Read the raw directory informations
            </summary>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.ReadRaw">
            <summary>
             Read the given directory and return a raw List string
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Rename(System.String)">
            <summary>
             Rename the given directory on the device
            </summary>
            <param name="newName">New directoryname (not the full path)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.ToString">
            <summary>
             return complete path of this directory
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Files">
            <summary>
             Files is the general class for file interactions on/with the device.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Files.Exists">
            <summary>
             Exist check if the file exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Files.Name">
            <summary>
             Returns only the filename without any path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Files.Size">
            <summary>
             Returns the filesize in byte
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Append(System.String)">
            <summary>
             Append the given data
            </summary>
            <param name="data">data to append</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Append(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Append the given data
            </summary>
            <param name="data">IEnumerable&lt;string&gt;</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Chmod(System.String)">
            <summary>
             Sets the given chmod for this file on the device.
             <para>*NOTE* U can also set an unix chmod (rwxrwxrwx). If u want to set an unix format u must use the full 9 chars.</para>
             <para>*NOTE* Like this examples: (rw-rwx-wt), (rwsrwsrwt), (rw-r--r--)</para>
             <para>*HINT* Usefull if u use the directory parser and want to copy some permissions to other files/folders.</para>
             <para>*HINT* This function uses ToolBox.ConvertUnixChmod() to convert the unix format to an number.</para>
            </summary>
            <param name="chmod">The chmod to set</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Chown(System.String,System.String)">
            <summary>
             Own this file with given owner and group id
            <para>*NOTE* This method needs root access on the device</para>
            </summary>
            <param name="owner">New owner</param>
            <param name="group">New group</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.CopyTo(System.String)">
            <summary>
             Copy this file to the given location on the device
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Create">
            <summary>
             Create an file on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Create(System.String)">
            <summary>
             Create an file on the device
            </summary>
            <param name="content">content to write to the file</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Create(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Create an file on the device
            </summary>
            <param name="content">content to write to the file</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Delete(System.Boolean)">
            <summary>
             Delete the given file on the device
            </summary>
            <param name="force">not supported by all android versions</param>
            <returns>bool</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Files.Directory">
            <summary>
             Returns the parent directory as Directories
            </summary>
            <returns>Directories</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Files.Extension">
            <summary>
             Returns the file extension (e.g. .exe, .txt, .rc, etc...)
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Hash(AndroidCtrl.IDHash)">
            <summary>
             Generate a hash value from the given IDHash
             <para>*NOTE* This method require BusyBox!</para>
            </summary>
            <param name="hash">IDHash default is md5</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.HexDump">
            <summary>
             Gets the hexdump
             <para>*NOTE* This method require BusyBox!</para>
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.LinkTo(System.String,System.Boolean)">
            <summary>
             Create an sym-/hardlink on the given position
            </summary>
            <param name="destination">link destination (Must be a file)</param>
            <param name="symlink">true = symlink | false = hardlink</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.MoveTo(System.String)">
            <summary>
             Move this file to the given location on the device
            </summary>
            <param name="destination">Remote destination file path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.ParseInfo">
            <summary>
             Parse the RawInfo() output into a human readable class
            </summary>
            <returns>DataModelFileSystemItem or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.PullTo(System.String)">
            <summary>
             Download this file from the device to the given location
            <para>*NOTE* If u created the instance with su=true u also need adbd running as root to get this method work.</para>
            </summary>
            <param name="destination">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.PushFrom(System.String)">
            <summary>
             Upload this file to the device from the given location
            <para>*NOTE* If u created the instance with su=true u also need adbd running as root to get this method work.</para>
            </summary>
            <param name="source">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.RawInfo">
            <summary>
             Read the raw file informations
            </summary>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.ReadContent">
            <summary>
             Reads the given file content on the device
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Rename(System.String)">
            <summary>
             Rename the given file on the device
            </summary>
            <param name="newName">New filename (not the full path)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.ToString">
            <summary>
             return complete path of this file
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Mount">
            <summary>
             Mount is the general class to un-/mount the filesystem or parts of it, on the device.
             <para>*NOTE* This class needs root access on the device</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.IsRootRW">
            <summary>
             IsRootRW checks if rootfs and /system is mounted as read/write or not
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.IsReadWrite(System.String)">
            <summary>
             IsReadWrite checks if the given id is mounted as read/write or not
            </summary>
            <param name="id">id to mount e.g. rootfs or /system</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.Loop(System.String,System.String,System.String)">
            <summary>
             Mount the given source path as loop device to the given destination
            <para/>*NOTE*
            <para/>The device kernel MUST support loop devices!
            <para/>If the method return false u can try it with ADB.Instance().UseBusyBox = true, if busybox exists.
            <para/>If u get then also a false u have to mount the loop device by ur self. Reason for this could be a wrong loop device location...
            <para/>I got this problem on my device. losetup returned the location /dev/loop1 but it was /dev/block/loop1.
            </summary>
            <param name="type">mount type (ext,ext2,ext3,ext4,vfat etc.)</param>
            <param name="source">image/block/device to mount</param>
            <param name="destination">mount location, the path must already exist</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.ReadOnly(System.String)">
            <summary>
             ReadOnly try to remount the given id as read/only
            </summary>
            <param name="id">id to remount e.g. rootfs or /system</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.ReadWrite(System.String)">
            <summary>
             ReadWrite try to remount the given id as read/write
            </summary>
            <param name="id">id to remount e.g. rootfs or /system</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.RootRO">
            <summary>
             RootRO try to remount rootfs and /system as read/only
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.RootRW">
            <summary>
             RootRW try to remount rootfs and /system as read/write
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.UnMount(System.String)">
            <summary>
             Unmount the given mount
            </summary>
            <param name="id">id to unmount e.g. rootfs or /system</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Su">
            <summary>
             Su is the general class to interact with su rights on the device.
            <para/>*NOTE*
            <para/>This class require root access!
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Su.Exists">
            <summary>
             Checks if su is installed and working
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Su.Version">
            <summary>
             Version return the current su version number (if supported)
            <para/>*NOTE*
            <para/>If the version can not be determined or if su is not found or not accessable the return is string.Empty
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.AutoAlign">
            <summary>
             Checks if ADB.Instance().UseSu is set to IDSu.Auto and then try to check if root is available.
            <para/>If root is available it will set UseSu to IDSu.ENFORCE and return true.
            <para/>If root is not available it will set UseSu to IDSu.NEVER and return false.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default timeout.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default timeout.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device and return the HResult
            <para/>*NOTE* 
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default timeout.</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default timeout.</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an SU-Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmdStack">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an SU-Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmdStack">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.String,System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Su.ShellRT">
            <summary>
             Returns a new SuShellRT instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.ADB">
            <summary>
             .NET 4.x wrapper class, to interact with an Android device via the (A)ndroid (D)ebug (B)ridge.
            <para/>*NOTE*
            <para/>ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.
            <para/>Exceptions are nested commands, these u have to quote ur self.
            <para/>All functions in this and some sub-classes are designed to work primary without root.
            <para/>If u want to use all functions with root rights, u have to restart the ADB Deamon on the device with root rights. Also u need to set UseSu to IDSu.AUTO or IDSu.ENFORCE.
            <para/>U can restart the device daemon by using Instance().Device.Daemon.Root() or simply Instance().Root().
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Instance(System.String)">
            <summary>
             Returns and if not exists creates, the choosen ADB device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is empty, the return is ever the class selected device.
            </summary>
            <param name="device">The device id/serialnumber or empty</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Instance(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Returns and if not exists creates, the choosen ADB device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is null, the return is ever the class selected device.
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.RemoveDevice(System.String)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.RemoveDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.SelectDevice(System.String)">
            <summary>
             Select the given device serial in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via ADB.Instance().
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.SelectDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Select the given device in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via ADB.Instance().
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.IsStarted">
            <summary>
             Check if ADB process is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.PATH_EXE">
            <summary>
             Get the full exe path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.PATH_DIRECTORY">
            <summary>
             Get/Set the directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.Version">
            <summary>
             Get ADB version
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Connect(System.String,System.String)">
            <summary>
             Connect a single devices via ip
            </summary>
            <param name="deviceIP">e.g. 0.0.0.0</param>
            <param name="port">default is 5555</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Connect(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Connect the given device
            </summary>
            <param name="device">DataModelDevicesItem</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.ConnectionMonitor">
            <summary>
             Returns and if not exist, creates the ConnectionMonitor instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Devices">
            <summary>
             List all connected Devices
            </summary>
            <returns>IEnumerable&lt;DevicesItemData&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Disconnect(System.String,System.String)">
            <summary>
             Disconnect a single or all ip devices
            </summary>
            <param name="deviceIP">e.g. 0.0.0.0</param>
            <param name="port">default is 5555</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Disconnect(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Disconnect the given device
            </summary>
            <param name="device">DataModelDevicesItem</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Dispose(System.Boolean)">
            <summary>
             Dispose is not a real IDisposable but it do its work.
            <para/>It will reset the whole ADB class to null, everything in this class will be deleted, stopped, closed, etc...
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.IntegrityCheck">
            <summary>
             Checks if all needed files exists
            <para/>Checks for:
            <para/>adb.exe
            <para/>AdbWinApi.dll
            <para/>AdbWinUsbApi.dll
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Manufacturer">
            <summary>
             Opens the manufacturer homepage in the default browser
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Reconnect(System.String)">
            <summary>
             Reconnect a single or all devices
            </summary>
            <param name="device">device serial</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Reconnect(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Reconnect the given device
            </summary>
            <param name="device">DataModelDevicesItem</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Start">
            <summary>
             Start ADB-Server
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Stop(System.Boolean)">
            <summary>
             Stop ADB-Server
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.WaitForDevice">
            <summary>
             Wait until a device is connected
            <para/>*NOTE*
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.WaitFor(AndroidCtrl.IDDeviceTransport,AndroidCtrl.IDDeviceState)">
            <summary>
             Wait until a device with the given trasport ID and state connects to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Xecute(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute the given command on the defined device
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="deviceSerial">device serialnumber</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.DeviceID">
            <summary>
             DeviceID return the DeviceID for this class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.IsBooted">
            <summary>
             Checks if the device is booted
            <para/>*NOTE*
            <para/>This will return true when android finished the complete boot procedure
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.IsRoot">
            <summary>
             IsRoot checks if ADB is running as root in this instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.UseBusyBox">
            <summary>
             UseBusyBox de-/activate BusyBox for the whole instance. Set false for unset.
            <para/>*NOTE*
            <para/>If no BusyBox is installed on the device, this parameter can't be set to true it will always return false!
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.Device">
            <summary>
             Returns and if not exist, creates the Device instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.ShellRT">
            <summary>
             Returns a new ShellRT instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Backup(System.String,System.String)">
            <summary>
             Backup the Device with given arguments.
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Backup arguments</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.BugReport">
            <summary>
             BugReport returns all information from the device that should be included in a bug report
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Emu(System.String,System.Int32)">
            <summary>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Emu(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ExecOut(System.String,System.IO.Stream,System.Int32)">
            <summary>
            ExecOut is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">output stream</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Execute(System.String,System.Int32)">
            <summary>
             Execute a custom command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Execute(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute a custom command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Forward(System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Forward(System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Forward(AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Forward(System.String,AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.GetDevPath">
            <summary>
             Return the devpath or an empty string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.GetSerial">
            <summary>
             Return the Device serialnumber or an empty string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.GetState">
            <summary>
             Return the Device state
            </summary>
            <returns>StateID</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Install(System.String,System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Installer arguments or null</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Install(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="localPaths">File paths</param>
            <param name="args">Installer arguments or null</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.JDWP">
            <summary>
             JDWP list PIDs of processes hosting a JDWP transport
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Keygen(System.String)">
            <summary>
             Keygen generate adb public/private key.
            <para/>*NOTE*
            <para/>The private key is stored in (the/given/path), and the public key is stored in (the/given/path.pub). Any existing files will be overwritten.
            </summary>
            <param name="localKeyPath">local key file path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Pull(System.String,System.String)">
            <summary>
             Get files/folders from the Device
             <para>*NOTE* i recommend at these point my PushPullUTF8.Pull() method.</para>
            </summary>
            <param name="remotePath">Device path remember use "/" instead of "\" or "\\"</param>
            <param name="localPath">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Push(System.String,System.String)">
            <summary>
             Send files/folders to the Device
             <para>*NOTE* i recommend at these point my PushPullUTF8.Push() method.</para>
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Device path remember use "/" instead of "\" or "\\"</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Reboot(AndroidCtrl.IDBoot)">
            <summary>
             Reboot the device to given mode
            <para/>*NOTE*
            <para/>All reboot requests will be closed after 1000 ms (this will not freeze the thread).
            </summary>
            <param name="mode">BootMode</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Remount">
            <summary>
             Remounts the Device system partition to read-write
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Restore(System.String)">
            <summary>
             Restore the backup to the device.
            </summary>
            <param name="localPath">File path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Reverse(System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Reverse(System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Reverse(AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Reverse(System.String,AndroidCtrl.IDFRPortType,System.String,AndroidCtrl.IDFRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Root">
            <summary>
             Restarts adb daemon with root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmd(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmd(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmd(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command use Device.Su.ShellCmd()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmdHRes(System.String,System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmdHRes(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmdHRes(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The method adds &quot;; echo $?&quot; to the given cmd and parse the return
            <para/>If u want to send a SU-Command use Device.Su.ShellCmdHRes()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmdStack(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmdStack(System.String,System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want to send a SU-Command-Stack use Device.Su.ShellCmdStack()
            <para/>Arguments can be:
            <para/>-e choose escape character, or "none"; default '~'
            <para/>-n don't read from stdin
            <para/>-T disable PTY allocation
            <para/>-t force PTY allocation
            <para/>-x disable remote exit codes and stdout/stderr separation
            <para/>the rest of the params u can use, u can find in the adb help
            </summary>
            <param name="args">Shell arguments</param>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Sideload(System.String,System.Int32)">
            <summary>
             Sideloads a rom
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The recovery must support this function
            </summary>
            <param name="localPath">Local path (c:\path\to\rom.zip)</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.TCPIP(System.Int32)">
            <summary>
             Restart adbd daemon listen on given tcp port
            </summary>
            <param name="port">port</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.TCPIP(System.String)">
            <summary>
             Restart adbd daemon listen on given tcp port
            </summary>
            <param name="port">port</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.UnInstall(System.String,System.Boolean)">
            <summary>
             UnInstall an APK on the Device
            </summary>
            <param name="package">package name e.g. com.example.package</param>
            <param name="keepData">keeps the cache and userdata</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.UnRoot">
            <summary>
             Restarts adb daemon without root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.USB">
            <summary>
             Restart adbd daemon listen on USB
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Verity(AndroidCtrl.IDDMVerity)">
            <summary>
             Dis-/Enable dm-verity on USERDEBUG builds
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.ConnectionMonitor">
            <summary>
             Manage the device connection monitor
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ConnectionMonitor.IsStarted">
            <summary>
             Check if the monitor is running
            </summary>
            <returns>if monitor is running return is true else false</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ConnectionMonitor.Start">
            <summary>
             DeviceConnectionMonitor starts a thread which checks every 10 sec for connected devices
            </summary>
            <returns>true if start successfull else false</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ConnectionMonitor.Stop(System.Boolean)">
            <summary>
             Stops the ConnectionMonitor Thread.
            </summary>
            <param name="resetEvents">If true the notify-events will be set to null. In this case u have to set all defined callbacks again!</param>
            <returns>true if stop successfull else false</returns>
        </member>
        <member name="E:AndroidCtrl.ADB.ConnectionMonitor.Callback">
            <summary>
             add/remove the callback function to raise if an event occure.
            </summary>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.RealTimeBG">
            <summary>
             abstract real time process model
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBG.Dispose">
            <summary>
             IDispose
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBG.Dispose(System.Boolean)">
            <summary>
             abstract IDispose
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBG.IsAlive">
            <summary>
             Checks if the process is running
            </summary>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.RealTimeBG.ErrorResponseCallback">
            <summary>
             Callback define the ErrorResponse function
            </summary>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.RealTimeBG.OutputResponseCallback">
            <summary>
             Callback define the OutputResponse function
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBG.Abort">
            <summary>
             Dispose the process and its background thread
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBG.Send(System.String)">
            <summary>
             Send the given command the running process
            </summary>
            <param name="cmd">command to send</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBG.Start">
            <summary>
             Start the process and its background thread
            </summary>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.General">
            <summary>
             Give u a few pre-defined .NET process models
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBG(System.String,System.String,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="exe">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBG(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="exe">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGStack(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Executes a stack of commands in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* Directly after launching the executable there will be send two blank lines to the process. This happens to activate an inactive shell instance for example.</para>
             <para>*NOTE* Between the cmds in the stack is an min. delay of 250 ms</para>
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="exe">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell)</param>
            <param name="cmdStack">The cmd stack to send</param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGStack(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Executes a stack of commands in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* Directly after launching the executable there will be send two blank lines to the process. This happens to activate an inactive shell instance for example.</para>
             <para>*NOTE* Between the cmds in the stack is an min. delay of 250 ms</para>
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="exe">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell)</param>
            <param name="cmdStack">The cmd stack to send</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBinaryBG(System.String,System.String,System.IO.Stream,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* timeOut = -1 implies infinite.</para>
             <para>*NOTE* This function reads only the StandardOutput.BaseStream!</para>
            </summary>
            <param name="exe">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="stream">output stream</param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.FormProcessArgs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Generates a single string from the given parameter
            </summary>
            <param name="args">Process/commandline arguments</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.FormProcessArgs(System.String,System.String)">
            <summary>
             Generates a single string from the given parameter
            </summary>
            <param name="deviceID">Device serial</param>
            <param name="args">Process/commandline arguments</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.FormProcessArgs(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Generates a single string from the given parameter
            </summary>
            <param name="deviceID">Device serial</param>
            <param name="args">Process/commandline arguments</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.OpenInBrowser(System.String)">
            <summary>
             Opens the given link in the default browser
            <para>*NOTE* If the link doesn't start with "(http|ftp)(s)?" the function will add "http://"</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.RealTimeBGExe">
            <summary>
             Give u a full working realtime background process with input ability, u can also define a callback function which will be raised if any error-/outputdata arrived.
             <para>*NOTE* Between the cmds is an delay of 150 ms</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.#ctor(System.String,System.String)">
            <summary>
             Creates a new realtime background process with input ability
            </summary>
            <param name="exe">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell)</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Finalize">
            <summary>
             Destructor
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Dispose(System.Boolean)">
            <summary>
             IDispose
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBGExe.Args">
            <summary>
             Set/Get the executable arguments
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBGExe.Exe">
            <summary>
             Set/Get the executable to start
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBGExe.IsAlive">
            <summary>
             Checks if the process is running
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Send(System.String)">
            <summary>
             Send the given command the running process
            </summary>
            <param name="cmd">command to send</param>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.RealTimeBGExe.ErrorResponseCallback">
            <summary>
             Callback define the ErrorResponse function
            </summary>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.RealTimeBGExe.OutputResponseCallback">
            <summary>
             Callback define the OutputResponse function
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Abort">
            <summary>
             Dispose the process and its background thread
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Start">
            <summary>
             Start the process and its background thread if "exe" exists
            </summary>
        </member>
        <member name="T:AndroidCtrl.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.aapt">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.adb">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.AdbWinApi">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.AdbWinUsbApi">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.apktool">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.fastboot">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.libwinpthread_1">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.signapk">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.testkey">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.testkey_x509">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="T:AndroidCtrl.AAPT.AAPT">
            <summary>
             .NET 4.x wrapper class, to interact with the (A)ndroid (A)sset (P)ackaging (T)ool.
            <para>*NOTE* ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.</para>
            <para>*NOTE* Exceptions are nested commands, these u have to quote ur self.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.Instance">
            <summary>
             Returns the AAPT class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.PATH_EXE">
            <summary>
             Get the full exe path
            </summary>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.PATH_DIRECTORY">
            <summary>
             Get/Set the directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.Version">
            <summary>
             Get AAPT version
            </summary>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.IntegrityCheck">
            <summary>
             Checks if all needed files exists
            <para>Checks for:</para>
            <para>aapt.exe</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.Manufacturer">
            <summary>
             Opens the manufacturer homepage in the default browser
            </summary>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.Xecute(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute the given command
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.CmdTimeout">
            <summary>
             CmdTimeOut define for the whole instance how long Xecute() will wait for the given process to responde.
             <para>*NOTE* Instance default is "-1", it implies infinite.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.Dump">
            <summary>
             Returns and if not exist, creates the Dump instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.Execute(System.String,System.Int32)">
            <summary>
             Execute a custom command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.Execute(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute a custom command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.ExtractApk(System.String,System.String)">
            <summary>
             Extract the complete apk to the given destination
            </summary>
            <param name="apk">Local APK file path</param>
            <param name="destination">Local destination folder path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.ExtractApkItems(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
             Extract the given items from the given APK to the given location
            </summary>
            <param name="apk">Local APK file path</param>
            <param name="list">
             List containing the item paths
            <para>The format must be similar to the following examples:</para>
            <para>icon.png</para>
            <para>res/drawable/icon.png</para>
            <para>!Importent! Never use "\\"</para>
            </param>
            <param name="destination">Local destination folder path</param>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.ExtractApkIcon(System.String,System.String)">
            <summary>
             Extract the (default) APK icon to the given location
            <para>The file is named "icon.png"</para>
            </summary>
            <param name="apk">Local APK file path</param>
            <param name="destination">Local destination folder path</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.AAPT.Dump">
            <summary>
             This class give u access to some AAPT dump parser
            </summary>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.Badging(System.String)">
            <summary>
             Returns the badging dump
            </summary>
            <param name="localPath">Local APK path</param>
            <returns>DataModelBadging or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.Configurations(System.String)">
            <summary>
             Returns the configurations dump
            </summary>
            <param name="localPath">Local APK path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.Permissions(System.String)">
            <summary>
             Returns the permission dump
            </summary>
            <param name="localPath">Local APK path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.Resources(System.String)">
            <summary>
             Returns the resources dump
            </summary>
            <param name="localPath">Local APK path</param>
            <returns>List DataModelDumpResources or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.RawDump(System.String)">
            <summary>
             Returns the raw dump
            </summary>
            <param name="dump">Dump part e.g. badging, configurations, etc.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.Strings(System.String)">
            <summary>
             Returns the strings dump
            </summary>
            <param name="localPath">Local APK path</param>
            <returns>Dictionary(ID, STRING) or null</returns>
        </member>
        <member name="T:AndroidCtrl.ApkTool.ApkTool">
            <summary>
             .NET 4.x wrapper class, to interact with the apktool.jar.
            <para>*NOTE* ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.</para>
            <para>*NOTE* Exceptions are nested commands, these u have to quote ur self.</para>
            <para>*NOTE* Until JavaExists returns false, all calls inside this class and all subclasses will not work!</para>
            <para>*NOTE* If u call any method until JavaExists returns false, u'll get no exceptions! Coz, ExecuteBG() checks if the given</para>
            <para>*NOTE* (.exe) file exists, if not, it will return an empty List string. So if the (.exe) not exists no call will be executed!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ApkTool.ApkTool.Instance">
            <summary>
             Returns the ApkTool class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ApkTool.ApkTool.JavaExists">
            <summary>
             Checks if the java.exe exists
            </summary>
        </member>
        <member name="P:AndroidCtrl.ApkTool.ApkTool.PATH_JAVA">
            <summary>
             Get the full java path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ApkTool.ApkTool.PATH_DIRECTORY_JAVA">
            <summary>
             Get/Set the java directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.ApkTool.ApkTool.PATH_JAR">
            <summary>
             Get the full apktool path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ApkTool.ApkTool.PATH_DIRECTORY">
            <summary>
             Get/Set the apktool directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.ApkTool.ApkTool.PATH_DIRECTORY_FRAMEWORK">
            <summary>
             Get the apktool framework directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.ApkTool.ApkTool.Version">
            <summary>
             Get apktool version
            </summary>
        </member>
        <member name="M:AndroidCtrl.ApkTool.ApkTool.IntegrityCheck">
            <summary>
             Checks if all needed files exists
            <para>Checks for:</para>
            <para>aapt.exe</para>
            <para>java.exe</para>
            <para>apktool.jar</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ApkTool.ApkTool.Manufacturer">
            <summary>
             Opens the manufacturer homepage in the default browser
            </summary>
        </member>
        <member name="M:AndroidCtrl.ApkTool.ApkTool.Xecute(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute the given command
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="P:AndroidCtrl.ApkTool.ApkTool.CmdTimeOut">
            <summary>
             CmdTimeOut define for the whole instance how long Xecute() will wait for the given process to responde.
             <para>*NOTE* Instance default is "-1", it implies infinite.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ApkTool.ApkTool.Execute(System.String,System.Int32)">
            <summary>
             Execute a custom command
            <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ApkTool.ApkTool.Execute(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute a custom command
            <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ApkTool.ApkTool.Decode(System.String,System.String)">
            <summary>
             Decodes the given apk to the given output directory
            <para>*NOTE* Delete and re-create the output directory if exists!</para>
            </summary>
            <param name="apkPath">Source apk</param>
            <param name="outputDirectory">Output directory</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ApkTool.ApkTool.InstallFramework(System.String)">
            <summary>
             Installs the given framework to the framework directory
            <para>*NOTE* Overwrites an existing framework file.</para>
            <para>*NOTE* This will install the given framework to "ApkTool.PATH_DIRECTORY_FRAMEWORK\*.apk"</para>
            </summary>
            <param name="apkPath">local framework.apk path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ApkTool.ApkTool.InstallFramework(System.String,System.String)">
            <summary>
             Installs the given framework with the given tag to the framework directory
            <para>*NOTE* Overwrites an existing framework file.</para>
            <para>*NOTE* This will install the given framework to "ApkTool.PATH_DIRECTORY_FRAMEWORK\*.apk"</para>
            </summary>
            <param name="apkPath">local framework.apk path</param>
            <param name="tag">framework tag (only for personal management)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ApkTool.ApkTool.Rebuild(System.String,System.String)">
            <summary>
             Rebuilds the given source to the given apk file
            </summary>
            <param name="sourceDirectory">Source directory</param>
            <param name="apkPath">APK path</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.Fastboot.Fastboot">
            <summary>
             .NET 4.x wrapper class, to interact with an Android device via Fastboot.
            <para/>*NOTE*
            <para/>ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.
            <para/>Exceptions are nested commands, these u have to quote ur self.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Instance(System.String)">
            <summary>
             Returns and if not exist creates, the choosen Fastboot device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is empty, the return is ever the class selected device.
            </summary>
            <param name="device">The device id/serialnumber or empty</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Instance(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Returns and if not exist creates, the choosen Fastboot device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is null, the return is ever the class selected device.
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.RemoveDevice(System.String)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.RemoveDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.SelectDevice(System.String)">
            <summary>
             Select the given device serial in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via Fastboot.Instance().
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.SelectDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Select the given device in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via Fastboot.Instance().
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.IsStarted">
            <summary>
             Check if Fastboot process is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.PATH_EXE">
            <summary>
             Get the full exe path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.PATH_DIRECTORY">
            <summary>
             Get/Set the directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.Version">
            <summary>
             Get Fastboot version
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.ConnectionMonitor">
            <summary>
             Returns and if not exist, creates the ConnectionMonitor instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Devices">
            <summary>
             List all connected Devices
            </summary>
            <returns>IEnumerable&lt;DevicesItemData&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Dispose(System.Boolean)">
            <summary>
             Dispose is not a real IDisposable but it do its work.
            <para/>It will reset the whole Fastboot class to null, everything in this class will be deleted, stopped, closed, etc...
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.ForceStop">
            <summary>
             Force Stop (kills the fastboot.exe process)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.IntegrityCheck">
            <summary>
             Checks if all needed files exists
            <para/>Checks for:
            <para/>fastboot.exe
            <para/>AdbWinApi.dll
            <para/>AdbWinUsbApi.dll
            <para/>libwinpthread-1.dll
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Manufacturer">
            <summary>
             Opens the manufacturer homepage in the default browser
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Xecute(System.String,System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute the given command on the defined device
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="deviceSerial">device serialnumber</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.CmdTimeOut">
            <summary>
             CmdTimeOut define for the whole instance how long Xecute() will wait for the given process to responde.
            <para/>*NOTE*
            <para/>Instance default is "-1", it implies infinite
            <para/>The value are milliseconds 30 sec = 30 000 ms
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.DeviceID">
            <summary>
             DeviceID return the DeviceID for this class instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Boot(System.String,System.String)">
            <summary>
             Boot the given image
            </summary>
            <param name="kernelPath">Kernel image path</param>
            <param name="ramdiskPath">Ramdisk image/zimage path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Continue">
            <summary>
             Continue with autoboot
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Erase(AndroidCtrl.IDDevicePartition)">
            <summary>
             Erase the given partition
            </summary>
            <param name="partition">DevicePartition</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Execute(System.String,System.Int32)">
            <summary>
             Execute a custom command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Execute(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute a custom command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Flash(AndroidCtrl.IDDevicePartition,System.String)">
            <summary>
             Write an file to an flash partition
            </summary>
            <param name="partition">DevicePartition</param>
            <param name="localPath">File path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Flashing(AndroidCtrl.IDFlashingMode)">
            <summary>
             Sets the flashing mode
            </summary>
            <param name="mode">FlashingMode</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Format(AndroidCtrl.IDDevicePartition)">
            <summary>
             Format the given partition
            </summary>
            <param name="partition">Partition to format</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.GetVar(System.String)">
            <summary>
             Get given bootloader variable
            </summary>
            <param name="variable">Variable to get</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.OEM">
            <summary>
             Returns and if not exist, creates the OEM instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Reboot(AndroidCtrl.IDBoot)">
            <summary>
             Reboot Device
            </summary>
            <param name="mode">BootMode</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Update(System.String)">
            <summary>
             Reflash Device from Update.zip
            </summary>
            <param name="localPath">File path</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.Wipe">
            <summary>
             Returns and if not exist, creates the Wipe instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.Fastboot.ConnectionMonitor">
            <summary>
             Manage the device connection monitor
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.ConnectionMonitor.IsStarted">
            <summary>
             Check if the monitor is running
            </summary>
            <returns>if monitor is running return is true else false</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.ConnectionMonitor.Start">
            <summary>
             DeviceConnectionMonitor starts a thread which checks every 10 sec for connected devices
            </summary>
            <returns>true if start successfull else false</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.ConnectionMonitor.Stop(System.Boolean)">
            <summary>
             Stops the ConnectionMonitor Thread.
            </summary>
            <param name="resetEvents">If true the notify-events will be set to null. In this case u have to set all defined callbacks again!</param>
            <returns>true if stop successfull else false</returns>
        </member>
        <member name="E:AndroidCtrl.Fastboot.ConnectionMonitor.Callback">
            <summary>
             add/remove the callback function to raise if an event occure.
            </summary>
        </member>
        <member name="T:AndroidCtrl.Fastboot.Wipe">
            <summary>
             This class give u access to some predefined wipe methods
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.All(System.Boolean)">
            <summary>
             Erase and format the cache, data and system partition
            </summary>
            <param name="erase">Erase each partition before it format each partition</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.Cache(System.Boolean)">
            <summary>
             Erase and format the cache partition
            </summary>
            <param name="erase">Erase the partition before it format the partition</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.Data(System.Boolean)">
            <summary>
             Erase and format the data partition
            </summary>
            <param name="erase">Erase the partition before it format the partition</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.System(System.Boolean)">
            <summary>
             Erase and format the system partition
            </summary>
            <param name="erase">Erase the partition before it format the partition</param>
        </member>
        <member name="T:AndroidCtrl.Fastboot.OEM">
            <summary>
             OEM is the general class for Fastboot OEM commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Xecute(System.String)">
            <summary>
             Execute the oem commands
            </summary>
            <param name="cmd">Command to execute</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.BattCheck">
            <summary>
             BattCheck
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.DeviceInfo">
            <summary>
             device-info (Get the device info)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetBootInfo">
            <summary>
             get-bootinfo (Get the bootloader state, locked/unlocked)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetIdentifierToken">
            <summary>
             Get_identifier_token (Get the bootloader identifier_token to unlock ur bootloader, for example by HTC)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetLockState">
            <summary>
             get-lockstate (Get the bootloader state, locked/unlocked)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GoToFastboot">
            <summary>
             GoToFastboot
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GoToHBoot">
            <summary>
             GoToHBoot
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Lock">
            <summary>
             Lock (Lock, relock the bootloader)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerDown">
            <summary>
             PowerDown
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerOff">
            <summary>
             PowerOff
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerOn">
            <summary>
             PowerOn
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerTest">
            <summary>
             PowerTest
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.RamTest">
            <summary>
             RamTest
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.ReadCid">
            <summary>
             Readcid (Read the CID)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.ReadIMEI">
            <summary>
             Readimei (Read the imei)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.ReadSecureFlag">
            <summary>
             Readsecureflag (Read the secureflag)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.RebootRUU">
            <summary>
             RebootRUU
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Relock(System.String)">
            <summary>
             Relock (relocks the bootloder with the given relock-code)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.SysInfo">
            <summary>
             SysInfo
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Unlock(System.String)">
            <summary>
             Unlock (unlocks the bootloder with the given unlock-code)
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.VibrateTest">
            <summary>
             VibrateTest
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteCid(System.String)">
            <summary>
             Writecid (Set a new (given) CID)
            </summary>
            <param name="cid">CID to set</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteIMEI(System.String)">
            <summary>
             Writeimei (Set a new imei)
            </summary>
            <param name="imei">IMEI to set</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteMid(System.String)">
            <summary>
             WriteMid (Set a new (given) MID)
            </summary>
            <param name="mid">MID to set</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteProtTest">
            <summary>
             WriteProtTest
            </summary>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteSecureFlag(System.String)">
            <summary>
             Writesecureflag (Set the secureflag) 3 = S-On
            </summary>
            <param name="flag">Flag to set</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="T:AndroidCtrl.Signer.Signer">
            <summary>
             .NET 4.x wrapper class, to interact with the signapk.jar.
            <para>*NOTE* ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.</para>
            <para>*NOTE* Exceptions are nested commands, these u have to quote ur self.</para>
            <para>*NOTE* Until JavaExists returns false, all calls inside this class and all subclasses will not work!</para>
            <para>*NOTE* If u call any method until JavaExists returns false, u'll get no exceptions! Coz, ExecuteBG() checks if the given</para>
            <para>*NOTE* (.exe) file exists, if not, it will return an empty List string. So if the (.exe) not exists no call will be executed!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.Instance">
            <summary>
             Returns the Signer class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.JavaExists">
            <summary>
             Checks if the java.exe exists
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_JAVA">
            <summary>
             Get the full java path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_DIRECTORY_JAVA">
            <summary>
             Get/Set the java directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_JAR">
            <summary>
             Get the full Signer path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_DIRECTORY">
            <summary>
             Get/Set the signer directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_PUBLIC_TEST_KEY">
            <summary>
             Get the public test key path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_PRIVATE_TEST_KEY">
            <summary>
             Get the private test key path
            </summary>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.IntegrityCheck">
            <summary>
             Checks if all needed files exists
            <para>Checks for:</para>
            <para>java.exe</para>
            <para>signapk.jar</para>
            <para>testkey.pk8</para>
            <para>testkey.x509.pem</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Xecute(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute the given command
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.CmdTimeOut">
            <summary>
             CmdTimeOut define for the whole instance how long Xecute() will wait for the given process to responde.
             <para>*NOTE* Instance default is "-1", it implies infinite.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Execute(System.String,System.Int32)">
            <summary>
             Execute a custom command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Execute(System.String,AndroidCtrl.CallbackProcessResponse,System.Int32)">
            <summary>
             Execute a custom command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseCallback">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>IEnumerable&lt;string&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Sign(System.String,System.String,System.String)">
            <summary>
             Signs an apk or zip file with the given public and private keys
            <para>*NOTE* The signed file will always be a signed copy of the given file</para>
            <para>*NOTE* The signed file will end like xxxxx_signed.apk or xxxxx_signed.zip</para>
            </summary>
            <param name="localPath">Local path to apk or zip file</param>
            <param name="publickey">Public key-file (xxxxxkey.x509.pem)</param>
            <param name="privatekey">Private key-file (xxxxxkey.pk8)</param>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.SignWithTestKeys(System.String)">
            <summary>
             Signs an apk or zip file with testkeys
             <para>*NOTE* The signed file will always be a signed copy of the given file</para>
             <para>*NOTE* The signed file will end like xxxxx_signed.apk or xxxxx_signed.zip</para>
            </summary>
            <param name="localPath">Local path to apk or zip</param>
        </member>
        <member name="T:AndroidCtrl.Tools.CRC16">
            <summary>
             CRC16
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC16.DefaultPolynomial">
            <summary>
             DefaultPolynomial (0xA001)
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC16.DefaultSeed">
            <summary>
             DefaultSeed (0)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.#ctor">
            <summary>
             CRC16
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.#ctor(System.UInt16,System.UInt16)">
            <summary>
             CRC16
            </summary>
            <param name="polynomial">ushort by default (0xA001)</param>
            <param name="seed">ushort by default (0)</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.Compute(System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="buffer">byte[]</param>
            <returns>ushort</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.Compute(System.UInt16,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="seed">uint</param>
            <param name="buffer">byte[]</param>
            <returns>ushort</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.Compute(System.UInt16,System.UInt16,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="polynomial">uint</param>
            <param name="seed">uint</param>
            <param name="buffer">byte[]</param>
            <returns>uint</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.OfString(System.String)">
            <summary>
             Calculates the CRC-checksum for the given string
            </summary>
            <param name="str">string</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.OfByteArray(System.Byte[])">
            <summary>
             Calculates the CRC-checksum for the given byte[]
            </summary>
            <param name="bytes">byte[]</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.Initialize">
            <summary>
             Initialize (override)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
             HashCore (override)
            </summary>
            <param name="array">byte[]</param>
            <param name="ibStart">int</param>
            <param name="cbSize">int</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.HashFinal">
            <summary>
             HashFinal (override)
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="P:AndroidCtrl.Tools.CRC16.HashSize">
            <summary>
             HashSize (override)
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.CRC32">
            <summary>
             CRC32
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC32.DefaultPolynomial">
            <summary>
             DefaultPolynomial (0xedb88320u)
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC32.DefaultSeed">
            <summary>
             DefaultSeed (0xffffffffu)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.#ctor">
            <summary>
             CRC32
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.#ctor(System.UInt32,System.UInt32)">
            <summary>
             CRC32
            </summary>
            <param name="polynomial">uint by default (0xedb88320u)</param>
            <param name="seed">uint by default (0xffffffffu)</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.Compute(System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="buffer">byte[]</param>
            <returns>uint</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.Compute(System.UInt32,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="seed">uint</param>
            <param name="buffer">byte[]</param>
            <returns>uint</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.Compute(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="polynomial">uint</param>
            <param name="seed">uint</param>
            <param name="buffer">byte[]</param>
            <returns>uint</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.OfString(System.String)">
            <summary>
             Calculates the CRC-checksum for the given string
            </summary>
            <param name="str">string</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.OfByteArray(System.Byte[])">
            <summary>
             Calculates the CRC-checksum for the given byte[]
            </summary>
            <param name="bytes">byte[]</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.Initialize">
            <summary>
             Initialize (override)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
             HashCore (override)
            </summary>
            <param name="array">byte[]</param>
            <param name="ibStart">int</param>
            <param name="cbSize">int</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.HashFinal">
            <summary>
             HashFinal (override)
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="P:AndroidCtrl.Tools.CRC32.HashSize">
            <summary>
             HashSize (override)
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.CRC64">
            <summary>
             CRC64
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC64.DefaultSeed">
            <summary>
             DefaultSeed (0x0)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.#ctor(System.UInt64)">
            <summary>
             CRC64
            </summary>
            <param name="polynomial">ulong</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.#ctor(System.UInt64,System.UInt64)">
            <summary>
             CRC64
            </summary>
            <param name="polynomial">ulong</param>
            <param name="seed">ulong</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.OfString(System.String)">
            <summary>
             Calculates the CRC-checksum for the given string
            </summary>
            <param name="str">string</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.OfByteArray(System.Byte[])">
            <summary>
             Calculates the CRC-checksum for the given byte[]
            </summary>
            <param name="bytes">byte[]</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.Initialize">
            <summary>
             Initialize (override)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
             HashCore (override)
            </summary>
            <param name="array"></param>
            <param name="ibStart"></param>
            <param name="cbSize"></param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.HashFinal">
            <summary>
             HashFinal (override)
            </summary>
            <returns></returns>
        </member>
        <member name="P:AndroidCtrl.Tools.CRC64.HashSize">
            <summary>
             HashSize (override)
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.CRC64Iso">
            <summary>
             CRC64 (ISO 3309)
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC64Iso.Iso3309Polynomial">
            <summary>
             Iso3309Polynomial (0xD800000000000000)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64Iso.#ctor">
            <summary>
             CRC64Iso
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64Iso.#ctor(System.UInt64)">
            <summary>
             CRC64Iso
            </summary>
            <param name="seed">ulong</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64Iso.Compute(System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="buffer">byte[]</param>
            <returns>ulong</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64Iso.Compute(System.UInt64,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="seed">ulong</param>
            <param name="buffer">byte[]</param>
            <returns>ulong</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.Deploy">
            <summary>
             Deploy the files needed by this dll.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.AAPT">
            <summary>
             Create the working folder (AAPT.PATH_DIRECTORY) and deploy the files needed by this dll
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.AAPT(System.String)">
            <summary>
             Create the given working folder and deploy the files needed by this dll
            </summary>
            <param name="localPath">Full qualified directory path</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ADB">
            <summary>
             Create the working folder (ADB.PATH_DIRECTORY) and deploy the files needed by this dll
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ADB(System.String)">
            <summary>
             Create the given working folder and deploy the files needed by this dll
            </summary>
            <param name="localPath">Full qualified directory path</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.Fastboot">
            <summary>
             Create the working folder (Fastboot.PATH_DIRECTORY) and deploy the files needed by this dll
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.Fastboot(System.String)">
            <summary>
             Create the given working folder and deploy the files needed by this dll
            </summary>
            <param name="localPath">Full qualified directory path</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ApkTool">
            <summary>
             Create the working folder (ApkTool.PATH_DIRECTORY) and deploy the files needed by this dll
            <para>*NOTE* aapt will also be extracted, coz it's needed by apktool.jar</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ApkTool(System.String)">
            <summary>
             Create the given working folder and deploy the files needed by this dll
            <para>*NOTE* aapt will also be extracted, coz it's needed by apktool.jar</para>
            </summary>
            <param name="localPath">Full qualified directory path</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.Signer">
            <summary>
             Create the working folder (Signer.PATH_DIRECTORY) and deploy the files needed by this dll
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.Signer(System.String)">
            <summary>
             Create the given working folder and deploy the files needed by this dll
            </summary>
            <param name="localPath">Full qualified directory path</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ExtractResource(System.Byte[],System.String)">
            <summary>
             Extract a deployment resource
            </summary>
            <param name="resource"></param>
            <param name="file"></param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ExtractResource(System.Byte[],System.String,System.String)">
            <summary>
             Extract a deployment resource and check the md5 hash
            </summary>
            <param name="resource"></param>
            <param name="file"></param>
            <param name="hash">md5 hash</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.InstallToGAC">
            <summary>
             Installs this dll to the (G)lobal (A)ssembly (C)ache and register it system-wide.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.DeinstallFromGAC">
            <summary>
             Deinstalls this dll from the (G)lobal (A)ssembly (C)ache and unregister it.
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.Hash">
            <summary>
             This class give u some shortcuts to .NET cryptography tools
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.FromBytes(System.Byte[],AndroidCtrl.IDHash)">
            <summary>
             Generate a hash from the given byte[] and HashID
            </summary>
            <param name="bytes">input bytes</param>
            <param name="hash">HashID</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.FromFile(System.String,AndroidCtrl.IDHash)">
            <summary>
             Generate a hash from the given file and HashID
            </summary>
            <param name="path">input filepath</param>
            <param name="hash">HashID</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.FromString(System.String,AndroidCtrl.IDHash)">
            <summary>
             Generate a hash from the given ASCII string and HashID
            </summary>
            <param name="str">input string</param>
            <param name="hash">HashID</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.Cleanup(System.Byte[])">
            <summary>
             Formats the generated hash
            </summary>
            <param name="bytes">raw hash</param>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.ToolBox">
            <summary>
             Here u can find some little usefull functions which makes ur life a bit easier ;)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.AdjustFilePath(System.String,System.Int32)">
            <summary>
             AdjustFilePath adds a (/) to the begin if no1 exist and remove it on the end if 1 exist, also it will replace "//" to "/"
            <para>*NOTE* Quotes are only added if whitespaces are detected!</para>
            </summary>
            <param name="path">path to check</param>
            <param name="quote">1 single (') | 2 double (") quote</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.AdjustDirectoryPath(System.String,System.Int32)">
            <summary>
             AdjustDirectoryPath adds a (/) to the given path begin and end if no1 exists, also it will replace "//" to "/"
            <para>*NOTE* Quotes are only added if whitespaces are detected!</para>
            </summary>
            <param name="path">path to check</param>
            <param name="quote">1 single (') | 2 double (") quote</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.CheckDeviceState(System.String)">
            <summary>
             Returns the state of the given deviceID
            </summary>
            <param name="deviceID">device id/serial</param>
            <returns>IDDeviceState</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.CheckDeviceState(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Returns the state of the given DataModelDevicesItem
            </summary>
            <param name="device">DataModelDevicesItem</param>
            <returns>IDDeviceState</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ConvertFileSize(System.Int64)">
            <summary>
             Calculate size in Byte,KB,MB,GB,TB,PT,EB,ZB,YB
            </summary>
            <param name="size">long 12389127389127389</param>
            <returns>string 2,45 MB | 200,00 GB</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ConvertFileSize(System.String)">
            <summary>
             Calculate size in Byte,KB,MB,GB,TB,PT,EB,ZB,YB
            </summary>
            <param name="size">string 12389127389127389</param>
            <returns>string  2,45 MB | 200,00 GB</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ConvertUnixChmod(System.String)">
            <summary>
             Convert an unix chmod (rwsrwxrwt) to an number (5777) and reverse
            </summary>
            <param name="chmod">(rwsrwxrwt) or (5777)</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ConvertUnixTimestamp(System.Double)">
            <summary>
             Return an DateTime object which represent the given unix miliseconds.
            </summary>
            <param name="unixTimestamp">(double) unix timestamp</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ConvertUnixTimestamp(System.DateTime)">
            <summary>
             Return an double which represent the given DateTime object.
            </summary>
            <param name="dateTime">DateTime object</param>
            <returns>double</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.GetEnumString(System.Enum)">
            <summary>
             Returns the real string value of the given enum
            </summary>
            <param name="enumVar">enum</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.GetJavaPath">
            <summary>
             Returns the Java-Path (x86/x64)
             <para>*NOTE* If Java is not installed the string will be empty</para>
             <para>*NOTE* The return is similar to "C:\Program Files (x86)\Java\jre7"</para>
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.IsAdministrator">
            <summary>
             Checks if the current program instance have administrator privilegs
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessAlive(System.String)">
            <summary>
             Check if the given processname is alive
            </summary>
            <param name="processName">Process name</param>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessAlive(System.Int32)">
            <summary>
             Check if the given processname is alive
            </summary>
            <param name="pid">Process ID</param>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessKill(System.String)">
            <summary>
             Kills all instances of the given process
            </summary>
            <param name="processName">Process name</param>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessKill(System.Int32)">
            <summary>
             Kills the given process ID
            </summary>
            <param name="pid">Process ID</param>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.Quote(System.String,System.Int32,System.Boolean)">
            <summary>
             Quote adds quotes (') or (") to a string
            <para>mode 1 = (') | 2 = (")</para>
            </summary>
            <param name="str">string to quote</param>
            <param name="mode">1 single (') | 2 double (") quote</param>
            <param name="esc">escape</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.UnZip(System.String,System.String)">
            <summary>
             UnZip the given ZIP-Archiv (.zip) to the given directory
            <para>*NOTE* If u use this function inside a Thread, u MUST use this function call inside a Dispatcher! Otherwise u'll get everytime false as return!</para>
            <para>*NOTE* Something like: App.Current.Dispatcher.Invoke((Action)delegate { UnZip(string zipFile, string destination); });</para>
            </summary>
            <param name="zipFile">zip-archiv (.zip)</param>
            <param name="destination">output directory</param>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ParseBool(System.String)">
            <summary>
             Covert a string to bool (true,on,1) will be true all other will be false
            </summary>
            <param name="str">String to convert</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ParseDeviceState(System.String)">
            <summary>
             Convert a string like (bootloader,device,fastboot,etc.) in the right IDDeviceState type
            </summary>
            <param name="state">String to convert</param>
            <returns>IDDeviceState</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ParseSyncCommand(System.Byte[])">
            <summary>
             Convert a byte[] which must be at least 4 bytes long, to an ADBClient.IDADBSyncCmd
            </summary>
            <param name="cmd">byte[] to convert</param>
            <returns>ADBClient.IDADBSyncCmd</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ParseSyncCommand(System.Byte[],System.Int32)">
            <summary>
             Convert a byte[] which must be at least 4 bytes long, to an ADBClient.IDADBSyncCmd
            </summary>
            <param name="cmd">byte[] to convert</param>
            <param name="startIndex">start index for next 4 command bytes</param>
            <returns>ADBClient.IDADBSyncCmd</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.Hex">
            <summary>
             Hex Tools
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.BytesToHex(System.Byte[])">
            <summary>
             Encode the given byte[] to an hex string
            </summary>
            <param name="bytes">bytes to encode</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.StringToHex(System.String)">
            <summary>
             Encode the given (Encoding.ASCII) string to an hex string
            </summary>
            <param name="str">String to encode</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.StringToHex(System.String,System.Text.Encoding)">
            <summary>
             Encode the given string with the given encoding to an hex string
            </summary>
            <param name="str">String to encode</param>
            <param name="enc">Encoding</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.HexToBytes(System.String)">
            <summary>
             Decode the given hex string to an byte[]
            </summary>
            <param name="str">String to decode</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.HexToString(System.String)">
            <summary>
             Decode the given hex string to an (Encoding.ASCII) string
            </summary>
            <param name="str">String to decode</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.HexToString(System.String,System.Text.Encoding)">
            <summary>
             Decode the given hex string to an string with the given encoding
            </summary>
            <param name="str">String to decode</param>
            <param name="enc">Encoding</param>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.Icons">
            <summary>
             This is the basic class to get an icon from an filepath or an file extension
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Icons.IconOfExtension(System.String,System.Boolean,System.Boolean)">
            <summary>
             Get the icon of an extension
            </summary>
            <param name="filename">filename</param>
            <param name="overlay">bool symlink overlay</param>
            <param name="small">bool small (true) or big (false)</param>
            <returns>Icon</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Icons.IconOfFolder(System.Boolean,System.Boolean)">
            <summary>
             Get the windows folder icon
            </summary>
            <param name="overlay">bool symlink overlay</param>
            <param name="small">bool small (true) or big (false)</param>
            <returns>Icon</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Icons.IconOfPath(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Get the normal,small assigned icon of the given path
            </summary>
            <param name="filepath">physical path</param>
            <param name="small">bool small icon</param>
            <param name="checkdisk">bool fileicon</param>
            <param name="overlay">bool symlink overlay</param>
            <returns>Icon</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.TrayNotify">
            <summary>
             This is the basic class to manage/build the tray notifications
            </summary>
        </member>
        <member name="P:AndroidCtrl.Tools.TrayNotify.Instance">
            <summary>
             Returns and if not exists, creates the TrayNotify instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.Dispose">
            <summary>
             Dispose this instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.Dispose(System.Boolean)">
            <summary>
             virtual Dispose
            </summary>
        </member>
        <member name="P:AndroidCtrl.Tools.TrayNotify.IsActive">
            <summary>
             Checks if the notify-system is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.Tools.TrayNotify.ContextMenu">
            <summary>
             Gets/Sets the Notify-Context-Menu
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.Init">
            <summary>
             Starts the notify-system
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.SetBalloonTip(System.String)">
            <summary>
             Set the given data as BalloonTip text
            </summary>
            <param name="data">string to set</param>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.SetDeviceInfo(System.String,System.String)">
            <summary>
             Set the device information from ADB or Fastboot as balloon tip
            </summary>
            <param name="deviceid">DeviceID/-Serial</param>
            <param name="mode">adb or fastboot</param>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.SetDeviceInfo(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Set the device information from ADB or Fastboot as balloon tip
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.NotifyDoubleClick(System.Object,System.EventArgs)">
            <summary>
             Restore the application window
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.Update">
            <summary>
             Update manager (SG Code-Design)
            <para>*NOTE* This class requires internet access!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Tools.Update.Instance">
            <summary>
             Returns the Update class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Tools.Update.Proxy">
            <summary>
             Get/Set the Proxy
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Update.CheckVersion">
            <summary>
             Checks for new version
            </summary>
            <returns>
            <para>-1 = an error occured</para>
            <para>0 = everything is OK</para>
            <para>1 = a new version is available</para>
            </returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Update.GetChangelog">
            <summary>
             Get the current changelog
            </summary>
            <returns>null or the current changelog</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Update.GetNews">
            <summary>
             Get the current news
            </summary>
            <returns>null or the current news</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Update.GetUpdate(System.String)">
            <summary>
             Download the latest update
            <para>*NOTE* This will overwrite an existing file (ur\path\AndroidCtrl.dll)</para>
            </summary>
            <param name="localDirectory">local directory</param>
            <returns></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Update.SendBugReport(System.Exception)">
            <summary>
             Sends the given bug-report to the developers server
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Update.SendUserReport(System.String,System.String,System.String)">
            <summary>
             Sends the given report to the developers server
            </summary>
            <param name="email">email address</param>
            <param name="subject">mail subject</param>
            <param name="content">mail content</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Update.p2h(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
             Send a POST or GET request to the given server
            </summary>
            <param name="Data">POST or GET data</param>
            <param name="func">function</param>
            <param name="post">On GET false</param>
            <returns>string or null</returns>
        </member>
        <member name="T:AndroidCtrl.Config">
            <summary>
             Default configuration
            <para>*NOTE* Changes in this class only appear if u start with an fresh dll instance.</para>
            <para>*NOTE* Any changes must be made before u start working with this dll.</para>
            <para>*NOTE* This is only a "init" | "default" | "fallback" configuration.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Config.Instance">
            <summary>
             Returns the Config class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Config.Local">
            <summary>
             Local configuration
            </summary>
        </member>
        <member name="P:AndroidCtrl.Config.Remote">
            <summary>
             Remote configuration
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.Local">
            <summary>
             Local configuration
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Local.Directory">
            <summary>
             Local base directories
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Local.LogFile">
            <summary>
             Get/Set the local LOG-File path
            <para>*NOTE* Full qualified filepath like "C:\\example.txt"</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.LocalDirectory">
            <summary>
             Local base directory paths
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.LocalDirectory.AAPT">
            <summary>
             AAPT directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.LocalDirectory.ADB">
            <summary>
             ADB directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.LocalDirectory.ApkTool">
            <summary>
             ApkTool directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.LocalDirectory.Cache">
            <summary>
             Get/Set the local cache directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.LocalDirectory.Dll">
            <summary>
             Get the DLL working directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.LocalDirectory.Fastboot">
            <summary>
             Fastboot directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.LocalDirectory.Signer">
            <summary>
             Signer directory
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.Remote">
            <summary>
             Remote configuration
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Remote.Directory">
            <summary>
             Android base directories
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Remote.Provider">
            <summary>
             Android Provider directories
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.RemoteDirectory">
            <summary>
             Android directories
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteDirectory.Cache">
            <summary>
             Get/Set the Android cache directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteDirectory.DalvikCache">
            <summary>
             Get/Set the Android dalvik-cache directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteDirectory.Data">
            <summary>
             Get/Set the Android data directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteDirectory.RecoveryCache">
            <summary>
             Get/Set the Android-Recovery cache directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteDirectory.SDCard">
            <summary>
             Get/Set the Android SDCard directory/mount
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteDirectory.SystemTmp">
            <summary>
             Get/Set the Android-System tmp directory
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.RemoteProvider">
            <summary>
             Android content provider
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteProvider.Contacts">
            <summary>
             Contact-Provider
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteProvider.Telephony">
            <summary>
             Telephony-Provider
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.RemoteProviderContacts">
            <summary>
             Android Contact-Provider
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteProviderContacts.Contacts2">
            <summary>
             Get/Set the Android-Contacts-Provider Database-File (contacts2.db) directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteProviderContacts.Profile">
            <summary>
             Get/Set the Android-Contacts-Provider Profile-File (profile.db) directory
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.RemoteProviderTelephony">
            <summary>
             Android Telephony-Provider
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteProviderTelephony.BlackList">
            <summary>
             Get/Set the Android-Telephony-Provider Blacklist-File (blacklist.db) directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteProviderTelephony.SmsMms">
            <summary>
             Get/Set the Android-Telephony-Provider SMS-MMS-Database-File (mmssms.db) directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RemoteProviderTelephony.Telephony">
            <summary>
             Get/Set the Android-Telephony-Provider Call-Database-File (telephony.db) directory
            </summary>
        </member>
        <member name="T:AndroidCtrl.Cleanup">
            <summary>
             Cleanup Area, here u can simply delete the folders which are created by this dll
            </summary>
        </member>
        <member name="P:AndroidCtrl.Cleanup.Instance">
            <summary>
             Returns the Cleanup class instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.Cleanup.AAPT">
            <summary>
             Delete the "AAPT.PATH_DIRECTORY" folder and it's content
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Cleanup.ADB">
            <summary>
             Delete the "ADB.PATH_DIRECTORY" folder and it's content
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Cleanup.ApkTool">
            <summary>
             Delete the "ApkTool.PATH_DIRECTORY" folder and it's content
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Cleanup.Cache">
            <summary>
             Delete the "Config.Instance.Local.Directory.Cache" folder and it's content
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Cleanup.Complete">
            <summary>
             Call all methods inside this class
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Cleanup.Fastboot">
            <summary>
             Delete the "Fastboot.PATH_DIRECTORY" folder and it's content
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Cleanup.Signer">
            <summary>
             Delete the "Signer.PATH_DIRECTORY" folder and it's content
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.CallbackConnectionMonitor">
            <summary>
             This callback will be raised if the connected devices have changed (adb/fastboot)
            </summary>
            <param name="sender">string adb or fastboot</param>
            <param name="e">ConnectionMonitorArgs object</param>
        </member>
        <member name="T:AndroidCtrl.CallbackDirectoryParser">
            <summary>
             This callback will be raised if u have set an callback to the directory parser
            </summary>
            <param name="sender">DeviceID</param>
            <param name="e">DirectoryParserArgs object</param>
        </member>
        <member name="T:AndroidCtrl.CallbackFileFolderTransfer">
            <summary>
             This callback will be raised if u have set an callback to pushpullutf8 push
            </summary>
            <param name="sender">DeviceID</param>
            <param name="e">FileFolderTransferArgs object</param>
        </member>
        <member name="T:AndroidCtrl.CallbackProcessResponse">
            <summary>
             This callback will be raised if u have set an callback to any realtime process
            </summary>
            <param name="sender">null</param>
            <param name="e">ProcessResponseArgs object</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsContact">
            <summary>
             DataModelContactsContact holds the contacts data table row structure
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.ID">
            <summary>
             Table row id
            <para>*NOTE* Can be -1, this implies null</para>
            <para>*HINT* Long story short, if this property is set to -1, this object is not useable.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Addresses">
            <summary>
             All addresses
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.DataRows">
            <summary>
             All contact data rows
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Emails">
            <summary>
             All emails
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Events">
            <summary>
             All events
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.IMs">
            <summary>
             All IM addresses
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Name">
            <summary>
             Structured contact name
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Nicknames">
            <summary>
             All contact nicknames
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Notes">
            <summary>
             All notes
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Organizations">
            <summary>
             All organizations
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Phones">
            <summary>
             All phone numbers
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Photos">
            <summary>
             All contact photos
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.RawContactIDs">
            <summary>
             All raw_contact_id's
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Relations">
            <summary>
             All relations
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.SipAddresses">
            <summary>
             All sip-addresses
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Websites">
            <summary>
             All websites
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsContact.Structure">
            <summary>
             Holds the table row structure
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsContact.#ctor(System.Int64)">
            <summary>
             Creates a new DataModelContactsContact object
            </summary>
            <param name="contactID">contact_id</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsDataField">
            <summary>
             DataModelContactsDataField holds the contacts data table row structure
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.ID">
            <summary>
             Table row id
            <para>*NOTE* Can be -1, this implies null</para>
            <para>*HINT* Long story short, if this property is set to -1, this object is not useable.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.PackageID">
            <summary>
             package_id
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.MimetypeID">
            <summary>
             mimetype_id
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.RawContactID">
            <summary>
             raw_contact_id
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.IsReadOnly">
            <summary>
             is_read_only
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.IsPrimary">
            <summary>
             is_primary
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.IsSuperPrimary">
            <summary>
             is_super_primary
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.DataVersion">
            <summary>
             data_version
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data1">
            <summary>
             data1
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data2">
            <summary>
             data2
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data3">
            <summary>
             data3
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data4">
            <summary>
             data4
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data5">
            <summary>
             data5
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data6">
            <summary>
             data6
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data7">
            <summary>
             data7
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data8">
            <summary>
             data8
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data9">
            <summary>
             data9
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data10">
            <summary>
             data10
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data11">
            <summary>
             data11
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data12">
            <summary>
             data12
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data13">
            <summary>
             data13
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data14">
            <summary>
             data14
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Data15">
            <summary>
             data15
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.DataSync1">
            <summary>
             data_sync1
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.DataSync2">
            <summary>
             data_sync2
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.DataSync3">
            <summary>
             data_sync3
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.DataSync4">
            <summary>
             data_sync4
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsDataField.Structure">
            <summary>
             Holds the table row structure
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsDataField.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsDataField object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsDataField.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a copy of the given DataModelContactsDataField object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsEmail">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsEmail.Email">
            <summary>
             Contact email address
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsEmail.Type">
            <summary>
             Contact email type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsEmail.Label">
            <summary>
             Contact email label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsEmail.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsEmail object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsEmail.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsEmail object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsEvent">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsEvent.Event">
            <summary>
             Contact event start time
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsEvent.Type">
            <summary>
             Contact event type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsEvent.Label">
            <summary>
             Contact event label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsEvent.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsEvent object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsEvent.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsEvent object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsGroup">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsGroup.GroupRowID">
            <summary>
             Contact group row id
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsGroup.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsGroup object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsGroup.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsGroup object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsIdentity">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsIdentity.Identity">
            <summary>
             Contact identity
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsIdentity.Namespace">
            <summary>
             Contact namespace
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsIdentity.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsIdentity object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsIdentity.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsIdentity object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsIM">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsIM.IM">
            <summary>
             Contact IM number
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsIM.Type">
            <summary>
             Contact IM type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsIM.Label">
            <summary>
             Contact IM label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsIM.Protocol">
            <summary>
             Contact IM protocol
            <para>*NOTE* Referrs to DataModelContactsDataField.Data5</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsIM.CustomProtocol">
            <summary>
             Contact custom IM protocol
            <para>*NOTE* Referrs to DataModelContactsDataField.Data6</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsIM.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsIM object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsIM.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsIM object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsName">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsName.DisplayName">
            <summary>
             Contact display name
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsName.GivenName">
            <summary>
             Contact given name
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsName.FamilyName">
            <summary>
             Contact family name
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsName.Prefix">
            <summary>
             Contact prefix (Mr, Mrs, Dr., etc.)
            <para>*NOTE* Referrs to DataModelContactsDataField.Data4</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsName.MiddleName">
            <summary>
             Contact middle name
            <para>*NOTE* Referrs to DataModelContactsDataField.Data5</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsName.Suffix">
            <summary>
             Contact suffix (Sr, Jr, III, etc.)
            <para>*NOTE* Referrs to DataModelContactsDataField.Data6</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsName.PhoneticGivenName">
            <summary>
             Contact phonetic given name
            <para>*NOTE* Referrs to DataModelContactsDataField.Data7</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsName.PhoneticMiddleName">
            <summary>
             Contact phonetic middle name
            <para>*NOTE* Referrs to DataModelContactsDataField.Data8</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsName.PhoneticFamilyName">
            <summary>
             Contact phonetic family name
            <para>*NOTE* Referrs to DataModelContactsDataField.Data9</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsName.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsName object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsName.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsName object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsNickname">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsNickname.Nickname">
            <summary>
             Contact nickname
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsNickname.Type">
            <summary>
             Contact nickname type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsNickname.Label">
            <summary>
             Contact nickname label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsNickname.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsNickname object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsNickname.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsNickname object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsNote">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsNote.Note">
            <summary>
             Contact note
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsNote.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsNote object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsNote.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsNote object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsOrganization">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.Organization">
            <summary>
             Contact organization
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.Type">
            <summary>
             Contact organization type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.Label">
            <summary>
             Contact organization label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.Title">
            <summary>
             Contact organization title
            <para>*NOTE* Referrs to DataModelContactsDataField.Data4</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.Department">
            <summary>
             Contact organization department
            <para>*NOTE* Referrs to DataModelContactsDataField.Data5</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.JobDescription">
            <summary>
             Contact organization job description
            <para>*NOTE* Referrs to DataModelContactsDataField.Data6</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.Symbol">
            <summary>
             Contact organization symbol
            <para>*NOTE* Referrs to DataModelContactsDataField.Data7</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.PhoneticName">
            <summary>
             Contact organization phonetic name
            <para>*NOTE* Referrs to DataModelContactsDataField.Data8</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.OfficeLocation">
            <summary>
             Contact organization office location
            <para>*NOTE* Referrs to DataModelContactsDataField.Data9</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsOrganization.PhoneticNameStyle">
            <summary>
             Contact organization phonetic name style
            <para>*NOTE* Referrs to DataModelContactsDataField.Data10</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsOrganization.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsOrganization object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsOrganization.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsOrganization object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsPhone">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPhone.Phone">
            <summary>
             Contact phone number
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPhone.Type">
            <summary>
             Contact phone type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPhone.Label">
            <summary>
             Contact phone label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsPhone.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsPhone object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsPhone.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsPhone object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsPhoto">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPhoto.PhotoFileID">
            <summary>
             Contact photo file id
            <para>*NOTE* Referrs to DataModelContactsDataField.Data14</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPhoto.RawPhoto">
            <summary>
             Contact raw photo (BLOB, hex)
            <para>*NOTE* Referrs to DataModelContactsDataField.Data15</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPhoto.Photo">
            <summary>
             Contact photo "System.Drawing.Image"
            <para>*NOTE* Returns null if RawPhoto is empty or no hex value</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsPhoto.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsPhoto object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsPhoto.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsPhoto object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsRelation">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsRelation.Relation">
            <summary>
             Contact relation
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsRelation.Type">
            <summary>
             Contact relation type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsRelation.Label">
            <summary>
             Contact relation label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsRelation.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsRelation object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsRelation.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsRelation object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsSipAddress">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsSipAddress.SipAddress">
            <summary>
             Contact sip-address
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsSipAddress.Type">
            <summary>
             Contact sip-address type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsSipAddress.Label">
            <summary>
             Contact sip-address label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsSipAddress.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsSipAddress object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsSipAddress.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsSipAddress object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsPostalAddress">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.FormattedAddress">
            <summary>
             Contact postal-address
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.Type">
            <summary>
             Contact postal-address type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.Label">
            <summary>
             Contact postal-address label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.Street">
            <summary>
             Contact street
            <para>*NOTE* Referrs to DataModelContactsDataField.Data4</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.POBox">
            <summary>
             Contact post office box number
            <para>*NOTE* Referrs to DataModelContactsDataField.Data5</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.Neighborhood">
            <summary>
             Contact neighborhood
            <para>*NOTE* Referrs to DataModelContactsDataField.Data6</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.City">
            <summary>
             Contact city
            <para>*NOTE* Referrs to DataModelContactsDataField.Data7</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.Region">
            <summary>
             Contact region
            <para>*NOTE* Referrs to DataModelContactsDataField.Data8</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.Postcode">
            <summary>
             Contact postcode
            <para>*NOTE* Referrs to DataModelContactsDataField.Data9</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsPostalAddress.Country">
            <summary>
             Contact country
            <para>*NOTE* Referrs to DataModelContactsDataField.Data10</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsPostalAddress.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsPostalAddress object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsPostalAddress.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsPostalAddress object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelContactsWebsite">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsWebsite.Website">
            <summary>
             Contact website
            <para>*NOTE* Referrs to DataModelContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsWebsite.Type">
            <summary>
             Contact website type
            <para>*NOTE* Referrs to DataModelContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelContactsWebsite.Label">
            <summary>
             Contact postal-address label
            <para>*NOTE* Referrs to DataModelContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsWebsite.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelContactsWebsite object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="M:AndroidCtrl.DataModelContactsWebsite.#ctor(AndroidCtrl.DataModelContactsDataField)">
            <summary>
             Creates a new DataModelContactsWebsite object
            </summary>
            <param name="obj">DataModelContactsDataField</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDeviceInfo">
            <summary>
             DataModelDeviceInfo holds the device information
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Baseband">
            <summary>
             Holds the value from ro.baseband if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Bootloader">
            <summary>
             Holds the value from ro.bootloader if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Bootmode">
            <summary>
             Holds the value from ro.bootmode if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Carrier">
            <summary>
             Holds the value from ro.carrier if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Revision">
            <summary>
             Holds the value from ro.revision if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.SerialNo">
            <summary>
             Holds the value from ro.serialno if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductShip">
            <summary>
             Holds the value from ro.product_ship if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BusyBoxExist">
            <summary>
             Holds the value from ADB.Instance().Device.BusyBox.Exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BusyBoxVersion">
            <summary>
             Holds the value from ADB.Instance().Device.BusyBox.Version
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BusyBoxTools">
            <summary>
             Holds the value from ADB.Instance().Device.BusyBox.Tools()
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.SUExist">
            <summary>
             Holds the value from ADB.Instance().Device.SU.Exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.SUVersion">
            <summary>
             Holds the value from ADB.Instance().Device.SU.Version
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBSerial">
            <summary>
             Holds the value from ADB.Instance().DeviceID if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBSecure">
            <summary>
             Holds the value from ro.adb.secure if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBRoot">
            <summary>
             Holds the value from service.adb.root if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBTCPPort">
            <summary>
             Holds the value from service.adb.tcp.port if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBQEmuD">
            <summary>
             Holds the value from ro.adb.qemud if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootBaseBand">
            <summary>
             Holds the value from ro.boot.baseband if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootBattPowerOn">
            <summary>
             Holds the value from ro.boot.batt_poweron if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootBootloader">
            <summary>
             Holds the value from ro.boot.bootloader if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootCarrier">
            <summary>
             Holds the value from ro.boot.carrier if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootCID">
            <summary>
             Holds the value from ro.boot.cid if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootDQ">
            <summary>
             Holds the value from ro.boot.dq if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootEMMC">
            <summary>
             Holds the value from ro.boot.emmc if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootHardware">
            <summary>
             Holds the value from ro.boot.hardware if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootKeyCaps">
            <summary>
             Holds the value from ro.boot.keycaps if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootLB">
            <summary>
             Holds the value from ro.boot.lb if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootMID">
            <summary>
             Holds the value from ro.boot.mid if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootMode">
            <summary>
             Holds the value from ro.boot.mode if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootPageSize">
            <summary>
             Holds the value from ro.boot.pagesize if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootSerialNo">
            <summary>
             Holds the value from ro.boot.serialno if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildCharacteristics">
            <summary>
             Holds the value from ro.build.characteristics if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildPDA">
            <summary>
             Holds the value from ro.build.PDA if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildDate">
            <summary>
             Holds the value from ro.build.date if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildHost">
            <summary>
             Holds the value from ro.build.host if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildDescription">
            <summary>
             Holds the value from ro.build.description if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildDisplayID">
            <summary>
             Holds the value from ro.build.display.id if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildFingerprint">
            <summary>
             Holds the value from ro.build.fingerprint if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildHiddenVer">
            <summary>
             Holds the value from ro.build.hidden_ver if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildID">
            <summary>
             Holds the value from ro.build.id if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildProduct">
            <summary>
             Holds the value from ro.build.product if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildSeLinux">
            <summary>
             Holds the value from ro.build.selinux if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildTags">
            <summary>
             Holds the value from ro.build.tags if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildType">
            <summary>
             Holds the value from ro.build.type if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildUser">
            <summary>
             Holds the value from ro.build.user if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersion">
            <summary>
             Holds the value from ro.build.version if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersionCodename">
            <summary>
             Holds the value from ro.build.version.codename if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersionIncremental">
            <summary>
             Holds the value from ro.build.version.incremental if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersionRelease">
            <summary>
             Holds the value from ro.build.version.release if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersionSDK">
            <summary>
             Holds the value from ro.build.version.sdk if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductName">
            <summary>
             Holds the value from ro.product.name if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductModel">
            <summary>
             Holds the value from ro.product.model if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductManufacturer">
            <summary>
             Holds the value from ro.product.manufacturer if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductDevice">
            <summary>
             Holds the value from ro.product.device if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductBoard">
            <summary>
             Holds the value from ro.product.board if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductBrand">
            <summary>
             Holds the value from ro.product.brand if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductCpuAbi">
            <summary>
             Holds the value from ro.product.cpu.abi if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductCpuAbi2">
            <summary>
             Holds the value from ro.product.cpu.abi2 if exist
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDevicesItem">
            <summary>
             DataModelDevicesItem holds the connected device information
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Mode">
            <summary>
             Request mode "adb" or "fastboot"
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Device">
            <summary>
             (ADB) deviceid
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.IP">
            <summary>
             IP-Address
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Model">
            <summary>
             (ADB) model name
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Port">
            <summary>
             Port
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Product">
            <summary>
             (ADB) product name
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Serial">
            <summary>
             (ADB/Fastboot) serialnumber
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.State">
            <summary>
             (ADB/Fastboot) state
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDevicesItem.#ctor(System.String,System.String,AndroidCtrl.IDDeviceState)">
            <summary>
             Creates the DataModelDevicesItem object (Fastboot)
            </summary>
            <param name="mode">"adb" or "fastboot"</param>
            <param name="serial">Device serial</param>
            <param name="state">IDDeviceState</param>
        </member>
        <member name="M:AndroidCtrl.DataModelDevicesItem.#ctor(System.String,System.String,AndroidCtrl.IDDeviceState,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDevicesItem object (ADB)
            </summary>
            <param name="mode">"adb" or "fastboot"</param>
            <param name="serial">Device serial</param>
            <param name="state">IDDeviceState</param>
            <param name="product">product name</param>
            <param name="model">model name</param>
            <param name="device">deviceid</param>
            <param name="ip">IP</param>
            <param name="port">Port</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpBadging">
            <summary>
             Holds the AAPT badging dump
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.AppLabel">
            <summary>
             Holds the Application name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.AppIcon">
            <summary>
             Holds the Application icon path
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.AppIcons">
            <summary>
             Holds the Application icons in each supported density
             <para>*NOTE* Format is Key=Density Value=IconPath></para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.AppLabels">
            <summary>
             Holds the Application labels in each supported language
             <para>*NOTE* Format is Key=Language (en / en_EN) Value=Label></para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.Densities">
            <summary>
             Holds the Application supported densities
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.LaunchableActivities">
            <summary>
             Holds the launchable-activities
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.Locales">
            <summary>
             Holds the Application supported locales
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.NativeCode">
            <summary>
             Holds the Application supported native codes
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.PackName">
            <summary>
             Holds the Package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.PackVersionCode">
            <summary>
             Holds the Package version code
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.PackVersionName">
            <summary>
             Holds the Package version name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.PackBuildVersionName">
            <summary>
             Holds the build package version name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.SupportedScreens">
            <summary>
             Holds the Application supported screens
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.SupportsAnyDensity">
            <summary>
             Holds the Application support any density trigger
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.SdkVersion">
            <summary>
             Holds the Application SDK version
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.TargetSdkVersion">
            <summary>
             Holds the Application target SDK version
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.ProvidedComponents">
            <summary>
             Holds the Application provided components e.g. app-widget, search, etc.
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.UsedFeatures">
            <summary>
             Holds the Application used features
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.UsedImpliedFeatures">
            <summary>
             Holds the Application used implied features
             <para>*NOTE* Format is Key=Feature Value=Extended></para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.UsedPermissions">
            <summary>
             Holds the Application used permissions
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.UsedImpliedPermissions">
            <summary>
             Holds the Application used implied permissions
             <para>*NOTE* Format is Key=Permission Value=Extended></para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpBadging.#ctor">
            <summary>
             Creates the DataModelDumpBadging object
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpBadgingLaunchableActivity">
            <summary>
             Holds the launchable-activity data of the AAPT badging dump
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadgingLaunchableActivity.Name">
            <summary>
             Holds the Application launchable-activity name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadgingLaunchableActivity.Label">
            <summary>
             Holds the Application launchable-activity label
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadgingLaunchableActivity.Icon">
            <summary>
             Holds the Application launchable-activity icon path
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpBadgingLaunchableActivity.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpBadgingLaunchableActivity object
            </summary>
            <param name="name">Activity name</param>
            <param name="label">Activity label</param>
            <param name="icon">Activity icon path</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesGroup">
            <summary>
             Holds the group data of the AAPT resources dump
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.Group">
            <summary>
             Holds the group number
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.Id">
            <summary>
             Holds the group id
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.Name">
            <summary>
             Holds the group name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.PCount">
            <summary>
             Holds the group packageCount
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.Packages">
            <summary>
             Holds the group packages
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesGroup.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResourcesGroup object
            </summary>
            <param name="group">Group number</param>
            <param name="id">Group id</param>
            <param name="name">Group name</param>
            <param name="pcount">Group packageCount</param>
            <param name="packages">Group packages</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesPackage">
            <summary>
             Holds the package data of the AAPT resources dump
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.Package">
            <summary>
             Holds the Package number
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.Id">
            <summary>
             Holds the Package id
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.Name">
            <summary>
             Holds the Package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.TCount">
            <summary>
             Holds the Package typeCount
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.Types">
            <summary>
             Holds the Package types
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesPackage.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResourcesPackage object
            </summary>
            <param name="package">Package number</param>
            <param name="id">Package id</param>
            <param name="name">Package name</param>
            <param name="tcount">Package typeCount</param>
            <param name="types">Package types</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesType">
            <summary>
             Holds the type data of the AAPT resources dump
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.Type">
            <summary>
             Holds the Type number
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.CCount">
            <summary>
             Holds the Type configCount
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.ECount">
            <summary>
             Holds the Type entryCount
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.Configs">
            <summary>
             Holds the Type configs
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.SpecResources">
            <summary>
             Holds the Type Spec Resources
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesType.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResourcesType object
            </summary>
            <param name="type">Type number</param>
            <param name="ccount">Type configCount</param>
            <param name="ecount">Type entryCount</param>
            <param name="entries">Type entries</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesConfig">
            <summary>
             Holds the config data of the AAPT resources dump
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesConfig.Type">
            <summary>
             Holds the Config type (default, etc)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesConfig.Resources">
            <summary>
             Holds the Config resources
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesConfig.#ctor(System.String,System.String)">
            <summary>
             Creates the DataModelDumpResourcesConfig object
            </summary>
            <param name="type">Config type</param>
            <param name="resources">Config resources</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesResource">
            <summary>
             Holds the AAPT resources dump item data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.Offset">
            <summary>
             Holds the Resource offset
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.Package">
            <summary>
             Holds the Resource package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.Type">
            <summary>
             Holds the Resource type (id, string, xml, etc.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.Id">
            <summary>
             Holds the Resource package id
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.T">
            <summary>
             Holds the T var value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.D">
            <summary>
             Holds the D var value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.S">
            <summary>
             Holds the S var value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.R">
            <summary>
             Holds the R var value
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesResource.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResources object
            </summary>
            <param name="offset">Resource offset</param>
            <param name="package">Resource package name</param>
            <param name="type">Resource type (id, string, xml, etc.)</param>
            <param name="id">Resource package id</param>
            <param name="t">t value</param>
            <param name="d">d value</param>
            <param name="s">s value</param>
            <param name="r">r value</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesSpecResource">
            <summary>
             Holds the AAPT resources dump item data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Offset">
            <summary>
             Holds the Resource offset
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Package">
            <summary>
             Holds the Resource package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Type">
            <summary>
             Holds the Resource type (id, string, xml, etc.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Id">
            <summary>
             Holds the Resource package id
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Flags">
            <summary>
             Holds the T var value
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesSpecResource.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResources object
            </summary>
            <param name="offset">Resource offset</param>
            <param name="package">Resource package name</param>
            <param name="type">Resource type (id, string, xml, etc.)</param>
            <param name="id">Resource package id</param>
            <param name="flags">flags value</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysBattery">
            <summary>
             DataModelDumpsysBattery holds the battery data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.AC">
            <summary>
             AC powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.USB">
            <summary>
             USB powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Wireless">
            <summary>
             Wireless powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Status">
            <summary>
             Current battery state
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Health">
            <summary>
             Current battery health
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Present">
            <summary>
             Present
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Level">
            <summary>
             Loading level
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Scale">
            <summary>
             Scale
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Voltage">
            <summary>
             Current voltage
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Current">
            <summary>
             Current voltage use
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Temperature">
            <summary>
             Current temperature
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Technology">
            <summary>
             Battery technology
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysBattery.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new DataModelDumpsysBattery
            </summary>
            <param name="ac">AC powered</param>
            <param name="usb">USB powered</param>
            <param name="wireless">Wireless powered</param>
            <param name="status">Current battery state</param>
            <param name="health">Current battery health</param>
            <param name="present">Present</param>
            <param name="level">Loading level</param>
            <param name="scale">Scale</param>
            <param name="voltage">Current voltage</param>
            <param name="current">Current voltage use</param>
            <param name="temperature">Current temperature</param>
            <param name="technology">Battery technology</param>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysBattery.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new DataModelDumpsysBattery
            </summary>
            <param name="data">AC powered</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfo_v4xx">
            <summary>
             Holds the ADB dumpsys meminfo data
            <para>*NOTE* This object is for Android 4.x.x output designed</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.Uptime">
            <summary>
             Holds the current uptime size
            <para>*HINT* Normally this value is given in kB</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.Realtime">
            <summary>
             Holds the current realtime size
            <para>*HINT* Normally this value is given in kB</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.ByProcess">
            <summary>
             Holds the "By Process" package list
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.ByOOM">
            <summary>
             Holds the "By OOM adjustment" package list sorted by thier areas. For example System, Cache, etc.
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.ByCategory">
            <summary>
             Holds the "By Category" package list
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.TotalRAM">
            <summary>
             Holds the complete available physical ram size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.FreeRAM">
            <summary>
             Holds the free ram size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.UsedRAM">
            <summary>
             Holds the used ram size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.LostRAM">
            <summary>
             Holds the lost ram size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.Tuning">
            <summary>
             Holds informations about the "Tuning"
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfo_4xx object
            </summary>
            <param name="uptime">Used ram since device start</param>
            <param name="realtime">Used ram since installation "?"</param>
            <param name="byprocess">Packages by process</param>
            <param name="byoom">Packages by oom adjustment</param>
            <param name="bycategory">Packages by category</param>
            <param name="totalram">Complete physical ram</param>
            <param name="freeram">Free ram</param>
            <param name="usedram">Used ram</param>
            <param name="lostram">Lost ram</param>
            <param name="tuning">Tuning infos</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx">
            <summary>
             Holds the ADB dumpsys meminfo item data
            <para>*NOTE* This object is for Android 4.x.x output designed</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.Size">
            <summary>
             Holds the current size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.Unit">
            <summary>
             Holds the current size unit
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.Name">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.PID">
            <summary>
             Holds the current PID
            <para>*NOTE* This variable is always "null" if u request this model via "ByCategory"</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.Activities">
            <summary>
             True if launched activities else false
            <para>*NOTE* This variable is always "false" if u request this model via "ByCategory"</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoItem_4xx object
            </summary>
            <param name="size">Mem size</param>
            <param name="unit">Mem size unit</param>
            <param name="name">Package-/Activityname</param>
            <param name="pid">PID</param>
            <param name="activities">Has activities</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackage">
            <summary>
             Holds the ADB dumpsys meminfo package data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Uptime">
            <summary>
             Holds the current uptime size
            <para>*HINT* Normally this value is given in kB</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Realtime">
            <summary>
             Holds the current realtime size
            <para>*HINT* Normally this value is given in kB</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.PID">
            <summary>
             Holds the PID
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Meminfo_v2xx">
            <summary>
             Holds the meminfo table lines
            <para>*NOTE* This list object is for Android 2.x.x output designed and empty if the device run's not Android v.2.x.x</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Meminfo_v4xx">
            <summary>
             Holds the meminfo table lines
            <para>*NOTE* This list object is for Android 4.x.x output designed and empty if the device run's not Android v.4.x.x</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Objects">
            <summary>
             Holds the objects info's
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.SQL">
            <summary>
             Holds the SQL info's
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Databases">
            <summary>
             Holds the database info's
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackage.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackage object
            </summary>
            <param name="uptime">Uptime</param>
            <param name="realtime">Realtime</param>
            <param name="pid">PID</param>
            <param name="meminfo">Meminfo table</param>
            <param name="objects">Objects table</param>
            <param name="sql">SQL table</param>
            <param name="databases">Database table</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem">
            <summary>
             Holds the ADB dumpsys meminfo package database line data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.PageSize">
            <summary>
             Holds the page size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.DatabaseSize">
            <summary>
             Holds the database size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.LookASide">
            <summary>
             Holds the "Look a side" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.Cache">
            <summary>
             Holds the cache sizes
            <para>*NOTE* This value is null if the device run's Android v.2.x.x</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.DatabaseName">
            <summary>
             Holds the database name
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageMeminfoItem_v4xx object
            </summary>
            <param name="pagesize">Page size</param>
            <param name="databasesize">Database size</param>
            <param name="lookaside">Look a side</param>
            <param name="cache">Cache sizes</param>
            <param name="databasename">Database name</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx">
            <summary>
             Holds the ADB dumpsys meminfo package meminfo line data
            <para>*NOTE* This object is for Android 2.x.x output designed</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Element">
            <summary>
             Holds the element name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Native">
            <summary>
             Holds the native size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Dalvik">
            <summary>
             Holds the dalvik size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Other">
            <summary>
             Holds the other size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Total">
            <summary>
             Holds the total size
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageMeminfoItem_v2xx object
            </summary>
            <param name="element">Element name</param>
            <param name="native">Native</param>
            <param name="dalvik">Dalvik</param>
            <param name="other">Other</param>
            <param name="total">Total</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx">
            <summary>
             Holds the ADB dumpsys meminfo package meminfo line data
            <para>*NOTE* This object is for Android 4.x.x output designed</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.Element">
            <summary>
             Holds the element name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.PSSTotal">
            <summary>
             Holds the "PSS Total" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.PrivateDirty">
            <summary>
             Holds the "Private Dirty" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.PrivateClean">
            <summary>
             Holds the "Private Clean" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.SwappedDirty">
            <summary>
             Holds the "Swapped Dirty" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.HeapSize">
            <summary>
             Holds the "Heap Size" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.HeapAlloc">
            <summary>
             Holds the "Heap Alloc" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.Heap">
            <summary>
             Holds the "Heap" value
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageMeminfoItem_v4xx object
            </summary>
            <param name="element">Element name</param>
            <param name="psstotal">PSS Total</param>
            <param name="privatedirty">Private Dirty</param>
            <param name="privateclean">Private Clean</param>
            <param name="swappeddirty">Swapped Dirty</param>
            <param name="heapsize">Heap Size</param>
            <param name="heapalloc">Heap Alloc</param>
            <param name="heap">Heap</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects">
            <summary>
             Holds the ADB dumpsys meminfo package objects data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.Views">
            <summary>
             Holds the amount of views
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.ViewRoots">
            <summary>
             Holds the amount of root-views
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.AppContexts">
            <summary>
             Holds the amount of contexts
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.Activities">
            <summary>
             Holds the amount of activities
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.Assets">
            <summary>
             Holds the amount of assets
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.AssetManagers">
            <summary>
             Holds the amount of asset-managers
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.LocalBinders">
            <summary>
             Holds the amount of local binders
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.ProxyBinders">
            <summary>
             Holds the amount of proxy binders
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.DeathRecipients">
            <summary>
             Holds the amount of death recipients
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.OpenSSLSockets">
            <summary>
             Holds the amount of OpenSSl sockets
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageObjects object
            </summary>
            <param name="views">Views</param>
            <param name="viewroots">View Roots</param>
            <param name="appcontexts">App Contexts</param>
            <param name="activities">Activities</param>
            <param name="assets">Assets</param>
            <param name="assetmanagers">Asset-Managers</param>
            <param name="localbinders">Local-Binders</param>
            <param name="proxybinders">Proxy-Binders</param>
            <param name="deathrecipients">Death-Recipients</param>
            <param name="opensslsockets">OpenSSL-Sockets</param>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL">
            <summary>
             Holds the ADB dumpsys meminfo package SQL data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.Heap">
            <summary>
             Holds the heap size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.MemoryUsed">
            <summary>
             Holds the used memory
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.PageCacheOverflow">
            <summary>
             Holds the page-cache-overflow
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.MemAlloc">
            <summary>
             Holds the allocated memory
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageSQL object
            </summary>
            <param name="heap">Heap</param>
            <param name="memoryused">Used memory</param>
            <param name="pagecacheoverflow">Page-Cache-Overflow</param>
            <param name="memalloc">Allocated memory</param>
        </member>
        <member name="T:AndroidCtrl.DataModelFileSystemItem">
            <summary>
             DataModelItem holds the file/folder data which the directory parser (shell/busybox) could get.
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Name">
            <summary>
             Holds the item name (text.txt)
            <para>*NOTE* if ItemID is an IDFileSystem.MOUNT this will hold the mountpoint or its ID this depends on the parse mode</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Path">
            <summary>
             Holds the full item path (/root/sdcard/test/text.txt)
            <para>*NOTE* if ItemID is an IDFileSystem.MOUNT this will hold the mountpoint</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.SymPath">
            <summary>
             Holds the full item sym path (/root/sdcard/test/text.txt)
            <para>*NOTE* if ItemID is an IDFileSystem.MOUNT this will hold the mountpoint</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.ID">
            <summary>
             Holds the item filesystemid (file,folder,etc...)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.INode">
            <summary>
             Holds the item inode number
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Type">
            <summary>
             Holds the item type (.exe,.bat,block_device_file,etc...)
            <para>*NOTE* if ItemID is an IDFileSystem.MOUNT this will hold a IDFileSystem.(SDCARD,DIRECTORY,etc.).ToString() for better identification</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Permission">
            <summary>
             Holds the item permissions (rwxrwx---)
            <para>*NOTE* if ItemID is an IDFileSystem.MOUNT this will be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Owner">
            <summary>
             Holds the item owner (system,sdcard_rw,etc...)
            <para>*NOTE* if ItemID is an IDFileSystem.MOUNT this will be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Group">
            <summary>
             Holds the item group (system,sdcard_rw,etc...)
            <para>*NOTE* if ItemID is an IDFileSystem.MOUNT this will be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Size">
            <summary>
             Holds the item size as string in byte
            <para>*NOTE* if ItemID is an IDFileSystem.MOUNT this will hold the whole mountpoint space</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.SizeUsed">
            <summary>
             Holds the item used space
            <para>*NOTE* ONLY if the item is an IDFileSystem.MOUNT else its null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.SizeFree">
            <summary>
             Holds the item free space
            <para>*NOTE* ONLY if the item is an IDFileSystem.MOUNT else its null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.SizeUse">
            <summary>
             Holds the item used space in (%)
            <para>*NOTE* ONLY if the item is an IDFileSystem.MOUNT else its null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.BlockSize">
            <summary>
             Holds the item blocksize
            <para>*NOTE* ONLY if the item is an IDFileSystem.MOUNT else its null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Date">
            <summary>
             Holds the item date, the format depends on the parsing type
            <para>*NOTE* if ItemID is an IDFileSystem.MOUNT this will be null</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemItem.#ctor(System.String,System.String,AndroidCtrl.IDFileSystem,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new DataModelFileSystemItem (MountPoints)
            </summary>
            <param name="name">Item name (test.txt)</param>
            <param name="path">Full item path (/root/sdcard/test/text.txt)</param>
            <param name="id">Item filesystemid</param>
            <param name="type">Item type (.exe,.bat,block_device_file,etc...)</param>
            <param name="size">Item size as string in byte</param>
            <param name="sizeused">Used space *NOTE* ONLY if the item is a mountpoint</param>
            <param name="sizefree">Free space *NOTE* ONLY if the item is a mountpoint</param>
            <param name="sizeuse">Used space in (%) *NOTE* ONLY if the item is a mountpoint</param>
            <param name="sizeblock">Blocksize *NOTE* ONLY if the item is a mountpoint</param>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemItem.#ctor(System.String,System.String,System.String,AndroidCtrl.IDFileSystem,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new DataModelFileSystemItem (FileSystem)
            </summary>
            <param name="name">Item name (test.txt)</param>
            <param name="path">Full item path (/root/sdcard/test/text.txt)</param>
            <param name="sympath">Item sym path (/root/sdcard/test/text.txt)</param>
            <param name="id">Item filesystemid</param>
            <param name="inode">Item inode number</param>
            <param name="type">Item type (.exe,.bat,block_device_file,etc...)</param>
            <param name="perm">Item permissions (rwxrwx---)</param>
            <param name="owner">Item owner (system,sdcard_rw,etc...)</param>
            <param name="group">Item group (system,sdcard_rw,etc...)</param>
            <param name="size">Item size as string in byte</param>
            <param name="date">Item date format depends on shell or busybox</param>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemItem.#ctor(AndroidCtrl.DataModelFileSystemItem)">
            <summary>
             Creates a copy of the given DataModelFileSystemItem object
            </summary>
            <param name="obj">DataModelFileSystemItem</param>
        </member>
        <member name="T:AndroidCtrl.DataModelFileSystemSize">
            <summary>
             Holds the file/folder/mount size in various formats
            <para>*NOTE* The multiplier for size calculation is 1024 by default. You can change this via the "Multiplier" parameter</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.Byte">
            <summary>
             Return the size in byte
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.KB">
            <summary>
             Return the size in kilobyte
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.MB">
            <summary>
             Return the size in megabyte
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.GB">
            <summary>
             Return the size in gigabyte
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.TB">
            <summary>
             Return the size in terrabyte
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.PB">
            <summary>
             Return the size in petabyte
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.EB">
            <summary>
             Return the size in exabyte
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.ZB">
            <summary>
             Return the size in zettabyte
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.YB">
            <summary>
             Return the size in yottabyte
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemSize.Multiplier">
            <summary>
             Multiplier for size calculation
            <para>*NOTE* There are only 2 allowed values "1000" and "1024"</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemSize.#ctor">
            <summary>
             Base Constructor
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemSize.#ctor(System.String)">
            <summary>
             string Constructor
            </summary>
            <param name="size">string byte size</param>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemSize.#ctor(System.Double)">
            <summary>
             double Constructor
            </summary>
            <param name="size">double byte size</param>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemSize.#ctor(System.Int64)">
            <summary>
             long Constructor
            </summary>
            <param name="size">long byte size</param>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemSize.ToString">
            <summary>
             Returns an auto-formatted string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemSize.ToString(System.String)">
            <summary>
             Returns an formatted string
            </summary>
            <param name="format">byte, kb, mb, gb, tb, pb, eb, zb, yb</param>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.DataModelKeyEvent">
            <summary>
             Holds the KeyEvent informations
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelKeyEvent.KeyEvent">
            <summary>
             Returns the IDKeyEvent to send
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelKeyEvent.LongPress">
            <summary>
             Returns true if the --longpress parameter is used
            <para/>*NOTE*
            <para/>The --longpress parameter is not supported on all android devices
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelKeyEvent.#ctor(AndroidCtrl.IDKeyEvent)">
            <summary>
             KeyEvent without --longpress
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelKeyEvent.#ctor(AndroidCtrl.IDKeyEvent,System.Boolean)">
            <summary>
             KeyEvent with/without --longpress
            </summary>
            <param name="keyEvent">IDKeyEvent to send</param>
            <param name="longPress">--longpress</param>
        </member>
        <member name="T:AndroidCtrl.DataModelLogCat">
            <summary>
             DataModelLogCat holds an logcat line formatted as object
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.Info">
            <summary>
             Holds the log info
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.Name">
            <summary>
             Holds the log sender name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.PID">
            <summary>
             Holds the log sender pid
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.TID">
            <summary>
             Holds the log sender tid
            <para>*NOTE* returns null if no "-v long" was defined</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.Time">
            <summary>
             Holds the log time
            <para>*NOTE* returns null if no "-v long" was defined</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.Type">
            <summary>
             Holds the log type
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelLogCat.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelLogCat object
            </summary>
            <param name="type">Log type</param>
            <param name="name">Log sender name</param>
            <param name="pid">Log sender pid</param>
            <param name="info">Log info</param>
            <param name="tid">Log sender tid</param>
            <param name="time">Log time</param>
        </member>
        <member name="T:AndroidCtrl.DataModelPackageManagerInstrumentation">
            <summary>
             DataModelPackageManagerInstrumentation holds the instrumentation data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerInstrumentation.Path">
            <summary>
             Holds the APK path
            <para>*NOTE* This variable can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerInstrumentation.Activity">
            <summary>
             Holds the activity
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerInstrumentation.Package">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelPackageManagerInstrumentation.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates the DataModelPackageManagerInstrumentation object
            </summary>
            <param name="path">APK path or null</param>
            <param name="activity">Activity</param>
            <param name="package">Package name</param>
        </member>
        <member name="T:AndroidCtrl.DataModelPackageManagerPackage">
            <summary>
             DataModelPackageManagerPackage holds the package data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPackage.Path">
            <summary>
             Holds the installed APK path
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPackage.Package">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelPackageManagerPackage.#ctor(System.String,System.String)">
            <summary>
             Creates the DataModelPackageManagerPackage object
            </summary>
            <param name="path">Installed APK path</param>
            <param name="package">Package name</param>
        </member>
        <member name="T:AndroidCtrl.DataModelPackageManagerPermission">
            <summary>
             DataModelPackageManagerPermission holds the permission data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.Permission">
            <summary>
             Holds the permission name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.Package">
            <summary>
             holds the package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.Label">
            <summary>
             Holds the label
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.Description">
            <summary>
             Holds the description
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.ProtectionLevel">
            <summary>
             Holds the protectionLevel
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelPackageManagerPermission.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelPackageManagerPermission object
            </summary>
            <param name="permission">Permission name</param>
            <param name="package">Package</param>
            <param name="label">Label</param>
            <param name="description">Description</param>
            <param name="protectionlevel">Protection-Level</param>
        </member>
        <member name="T:AndroidCtrl.DataModelPushList">
            <summary>
             DataModelItem holds the file/folder data which the pushpullutf8 push method needs.
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPushList.LocalPath">
            <summary>
             Holds the full local item path (c:\test\test.txt)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPushList.RemotePath">
            <summary>
             Holds the full remote item path (/root/blub/test.txt)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPushList.PathID">
            <summary>
             Holds the filesystemid (file,folder,etc...)
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelPushList.#ctor(System.String,System.String,AndroidCtrl.IDFileSystem)">
            <summary>
             Creates a new DataModelPushList
            </summary>
            <param name="localPath">Full local item path (c:\test\test.txt)</param>
            <param name="remotePath">Full remote item path (/root/blub/test.txt)</param>
            <param name="pathID">Item filesystemid (file,folder,etc...)</param>
        </member>
        <member name="T:AndroidCtrl.DataModelUptime">
            <summary>
             DataModelUptime holds the uptime data
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelUptime.Up">
            <summary>
             Holds the Device-up-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelUptime.Idle">
            <summary>
             Holds the Device-idle-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelUptime.Sleep">
            <summary>
             Holds the Device-sleep-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelUptime.Users">
            <summary>
             Holds the Device-users
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelUptime.Load">
            <summary>
             Holds the Device-load-average (only if busybox is installed)
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelUptime.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new DataModelUptime
            </summary>
            <param name="up">Device up-time</param>
            <param name="idle">Device idle-time</param>
            <param name="sleep">Device sleep-time</param>
            <param name="users">Device users</param>
            <param name="load">Device load-average</param>
        </member>
        <member name="T:AndroidCtrl.ConnectionMonitorArgs">
            <summary>
             ConnectionMonitorArgs holds the connected devices list
            </summary>
        </member>
        <member name="F:AndroidCtrl.ConnectionMonitorArgs.Devices">
            <summary>
             Returns the changed devices
            </summary>
        </member>
        <member name="M:AndroidCtrl.ConnectionMonitorArgs.#ctor(AndroidCtrl.DataModelDevicesItem[])">
            <summary>
             Creates the ConnectionMonitorArgs object
            </summary>
            <param name="devices">changed devices</param>
        </member>
        <member name="T:AndroidCtrl.DirectoryParserArgs">
            <summary>
             DirectoryParserArgs holds the parsed element
            </summary>
        </member>
        <member name="F:AndroidCtrl.DirectoryParserArgs.Element">
            <summary>
             Returns the parsed element object
            </summary>
        </member>
        <member name="M:AndroidCtrl.DirectoryParserArgs.#ctor(AndroidCtrl.DataModelFileSystemItem)">
            <summary>
             Creates the DirectoryParserArgs object
            </summary>
            <param name="element">DataModelFileSystemItem object</param>
        </member>
        <member name="T:AndroidCtrl.FileFolderTransferArgs">
            <summary>
             FileFolderTransferArgs holds file/folder transfer info
            </summary>
        </member>
        <member name="F:AndroidCtrl.FileFolderTransferArgs.From">
            <summary>
             Returns the "from" element
            </summary>
        </member>
        <member name="F:AndroidCtrl.FileFolderTransferArgs.To">
            <summary>
             Returns the "to" element
            </summary>
        </member>
        <member name="F:AndroidCtrl.FileFolderTransferArgs.FileSystemID">
            <summary>
             Returns the filesystem id
            </summary>
        </member>
        <member name="F:AndroidCtrl.FileFolderTransferArgs.TransferID">
            <summary>
             Returns the transfer id
            </summary>
        </member>
        <member name="M:AndroidCtrl.FileFolderTransferArgs.#ctor(System.String,System.String,AndroidCtrl.IDFileSystem,AndroidCtrl.IDTransfer)">
            <summary>
             Creates the FileFolderTransferArgs object
            </summary>
            <param name="from">Element path "from"</param>
            <param name="to">Element path "to"</param>
            <param name="filesystemid">IDFileSystem</param>
            <param name="transferid">IDTransfer</param>
        </member>
        <member name="T:AndroidCtrl.ProcessResponseArgs">
            <summary>
             ProcessResponseArgs holds the process output
            </summary>
        </member>
        <member name="F:AndroidCtrl.ProcessResponseArgs.Output">
            <summary>
             Returns the OutputDataReceived string
            </summary>
        </member>
        <member name="F:AndroidCtrl.ProcessResponseArgs.Error">
            <summary>
             Returns the ErrorDataReceived string
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessResponseArgs.#ctor(System.String,System.String)">
            <summary>
             Creates the ProcessResponseArgs object
            </summary>
            <param name="output">string OutputDataReceived</param>
            <param name="error">string ErrorDataReceived</param>
        </member>
        <member name="T:AndroidCtrl.IDAndroidCursor">
            <summary>
             Android cursor ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.NONE">
            <summary>
             Implies null
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.NAME">
            <summary>
             Implies "vnd.android.cursor.item/name"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.NICKNAME">
            <summary>
             Implies "vnd.android.cursor.item/nickname"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.EMAIL_V2">
            <summary>
             Implies "vnd.android.cursor.item/email_v2"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.PHONE_V2">
            <summary>
             Implies "vnd.android.cursor.item/phone_v2"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.POSTAL_ADDRESS_V2">
            <summary>
             Implies "vnd.android.cursor.item/postal-address_v2"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.ORGANIZATION">
            <summary>
             Implies "vnd.android.cursor.item/organization"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.PHOTO">
            <summary>
             Implies "vnd.android.cursor.item/photo"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.GROUP">
            <summary>
             Implies "vnd.android.cursor.item/group_membership"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.CONTACT_EVENT">
            <summary>
             Implies "vnd.android.cursor.item/contact_event"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.WEBSITE">
            <summary>
             Implies "vnd.android.cursor.item/website"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.IM">
            <summary>
             Implies "vnd.android.cursor.item/im"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.NOTE">
            <summary>
             Implies "vnd.android.cursor.item/note"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.SIP_ADDRESS">
            <summary>
             Implies "vnd.android.cursor.item/sip_address"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.IDENTITY">
            <summary>
             Implies "vnd.android.cursor.item/identity"
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDAndroidCursor.RELATION">
            <summary>
             Implies "vnd.android.cursor.item/relation"
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDBoot">
            <summary>
             ADB/Fastboot boot modes
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDBoot.BOOTLOADER">
            <summary>
             Implies reboot bootloader
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDBoot.DOWNLOAD">
            <summary>
             Implies reboot download
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDBoot.REBOOT">
            <summary>
             Implies reboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDBoot.RECOVERY">
            <summary>
             Implies reboot recovery
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDBoot.SIDELOAD">
            <summary>
             Implies reboot sideload
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDBoot.SIDELOAD_AUTO_REBOOT">
            <summary>
             Implies reboot sideload-auto-reboot
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDConnectionMonitorState">
            <summary>
             ConnectionMonitor event states
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDConnectionMonitorState.CHANGED">
            <summary>
             Implies that the device state has changed
            <para>*NOTE* see IDDeviceState</para>
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDConnectionMonitorState.CONNECTED">
            <summary>
             Implies new/re-connected device
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDConnectionMonitorState.DISCONNECTED">
            <summary>
             Implies removed device
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactEmailType">
            <summary>
             Android contact email type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactEmailType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactEmailType.HOME">
            <summary>
             Implies "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactEmailType.WORK">
            <summary>
             Implies "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactEmailType.OTHER">
            <summary>
             Implies "other" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactEmailType.MOBILE">
            <summary>
             Implies "mobile" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactEventType">
            <summary>
             Android contact evet type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactEventType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactEventType.ANNIVERSARY">
            <summary>
             Implies "anniversary" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactEventType.OTHER">
            <summary>
             Implies "other" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactEventType.BIRTHDAY">
            <summary>
             Implies "birthday" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactIMType">
            <summary>
             Android contact IM type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMType.HOME">
            <summary>
             Implies "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMType.WORK">
            <summary>
             Implies "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMType.OTHER">
            <summary>
             Implies "other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactIMProtocol">
            <summary>
             Android contact IM protocols
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.CUSTOM">
            <summary>
             Implies "custom" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.AIM">
            <summary>
             Implies "AIM" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.MSN">
            <summary>
             Implies "Msn" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.YAHOO">
            <summary>
             Implies "Yahoo" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.SKYPE">
            <summary>
             Implies "Skype" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.QQ">
            <summary>
             Implies "QQ" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.GOOGLE_TALK">
            <summary>
             Implies "Google Talk" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.ICQ">
            <summary>
             Implies "ICQ" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.JABBER">
            <summary>
             Implies "Jabber" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactIMProtocol.NETMEETING">
            <summary>
             Implies "Netmeeting" protocol
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactNicknameType">
            <summary>
             Android contact nickname type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactNicknameType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactNicknameType.DEFAULT">
            <summary>
             Implies "default" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactNicknameType.OTHER_NAME">
            <summary>
             Implies "other name" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactNicknameType.MAIDEN_NAME">
            <summary>
             Implies "maiden name" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactNicknameType.SHORT_NAME">
            <summary>
             Implies "short name" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactNicknameType.INITIALS">
            <summary>
             Implies "initials" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactOrganizationType">
            <summary>
             Android contact organization type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactOrganizationType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactOrganizationType.WORK">
            <summary>
             Implies "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactOrganizationType.OTHER">
            <summary>
             Implies "other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactPhoneType">
            <summary>
             Android contact phone type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.HOME">
            <summary>
             Implies "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.MOBILE">
            <summary>
             Implies "mobile" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.WORK">
            <summary>
             Implies "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.FAX_WORK">
            <summary>
             Implies "fax work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.FAX_HOME">
            <summary>
             Implies "fax home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.PAGER">
            <summary>
             Implies "pager" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.OTHER">
            <summary>
             Implies "other" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.CALLBACK">
            <summary>
             Implies "callback" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.CAR">
            <summary>
             Implies "car" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.COMPANY_MAIN">
            <summary>
             Implies "company main" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.ISDN">
            <summary>
             Implies "isdn" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.MAIN">
            <summary>
             Implies "main" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.FAX_OTHER">
            <summary>
             Implies "fax other" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.RADIO">
            <summary>
             Implies "radio" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.TELEX">
            <summary>
             Implies "telex" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.TTY_TDD">
            <summary>
             Implies "TTY tdd" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.WORK_MOBILE">
            <summary>
             Implies "work mobile" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.WORK_PAGER">
            <summary>
             Implies "work pager" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.ASSISTANT">
            <summary>
             Implies "assistant" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPhoneType.MMS">
            <summary>
             Implies "MMS" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactRelationType">
            <summary>
             Android contact relation type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.ASSISTANT">
            <summary>
             Implies "assistant" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.BROTHER">
            <summary>
             Implies "brother" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.CHILD">
            <summary>
             Implies "child" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.DOMESTIC_PARTNER">
            <summary>
             Implies "domestic partner" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.FATHER">
            <summary>
             Implies "father" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.FRIEND">
            <summary>
             Implies "friend" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.MANAGER">
            <summary>
             Implies "manager" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.MOTHER">
            <summary>
             Implies "mother" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.PARENT">
            <summary>
             Implies "parent" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.PARTNER">
            <summary>
             Implies "partner" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.REFERRED_BY">
            <summary>
             Implies "referred by" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.RELATIVE">
            <summary>
             Implies "relative" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.SISTER">
            <summary>
             Implies "sister" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactRelationType.SPOUSE">
            <summary>
             Implies "spouse" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactSipAddressType">
            <summary>
             Android contact sip-address type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactSipAddressType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactSipAddressType.HOME">
            <summary>
             Implies "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactSipAddressType.WORK">
            <summary>
             Implies "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactSipAddressType.OTHER">
            <summary>
             Implies "other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactPostalAddressType">
            <summary>
             Android contact postal-address type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPostalAddressType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPostalAddressType.HOME">
            <summary>
             Implies "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPostalAddressType.WORK">
            <summary>
             Implies "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactPostalAddressType.OTHER">
            <summary>
             Implies "other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDContactWebsiteType">
            <summary>
             Android contact website type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactWebsiteType.CUSTOM">
            <summary>
             Implies "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactWebsiteType.HOMEPAGE">
            <summary>
             Implies "Homepage" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactWebsiteType.BLOG">
            <summary>
             Implies "Blog" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactWebsiteType.PROFILE">
            <summary>
             Implies "Profile" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactWebsiteType.HOME">
            <summary>
             Implies "Home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactWebsiteType.WORK">
            <summary>
             Implies "Work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactWebsiteType.FTP">
            <summary>
             Implies "FTP" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDContactWebsiteType.OTHER">
            <summary>
             Implies "Other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDDMVerity">
            <summary>
             ID dm-verity modes
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDMVerity.ENABLE">
            <summary>
             Implies enable dm-verity
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDMVerity.DISABLE">
            <summary>
             Implies disable dm-verity
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDDeviceState">
            <summary>
             ADB/Fastboot state ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.BOOTLOADER">
            <summary>
             Implies bootloader/fastboot state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.DEVICE">
            <summary>
             Implies device/adb state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.DOWNLOAD">
            <summary>
             Implies download mode
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.FASTBOOT">
            <summary>
             Implies fastboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.OFFLINE">
            <summary>
             Implies offline
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.RECOVERY">
            <summary>
             Implies recovery/adb state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.SIDELOAD">
            <summary>
             Implies recovery/sideload state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.UNAUTHORIZED">
            <summary>
             Implies unauthorized state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.UNKNOWN">
            <summary>
             Implies unknown
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDDeviceTransport">
            <summary>
             ADB transport ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceTransport.ANY">
            <summary>
             Implies any
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceTransport.LOCAL">
            <summary>
             Implies local
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceTransport.USB">
            <summary>
             Implies USB
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDDevicePartition">
            <summary>
             Device partitions
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.BOOT">
            <summary>
             Implies boot
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.BOOTLOADER">
            <summary>
             Implies bootloader
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.CACHE">
            <summary>
             Implies cache
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.CUST">
            <summary>
             Implies cache
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.DATA">
            <summary>
             Implies data
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.HBOOT">
            <summary>
             Implies hboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.KERNEL">
            <summary>
             Implies kernel
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.MISC">
            <summary>
             Implies misc
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.RADIO">
            <summary>
             Implies radio
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.RAMDISK">
            <summary>
             Implies ramdisk
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.RECOVERY">
            <summary>
             Implies recovery
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.SDCARD">
            <summary>
             Implies sdcard
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.SYSTEM">
            <summary>
             Implies system
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.UNLOCKTOKEN">
            <summary>
             Implies unlocktoken
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.USERDATA">
            <summary>
             Implies userdata
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.VENDOR">
            <summary>
             Implies vendor
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.ZIP">
            <summary>
             Implies a zip file to install
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDFileSystem">
            <summary>
             FileSystem IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.DIRECTORY">
            <summary>
             Implies an directory
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.FILE">
            <summary>
             Implies an file
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.MOUNT">
            <summary>
             Implies an mountpoint
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.NONE">
            <summary>
             Implies no/unknown file
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.ROOT">
            <summary>
             Implies the root direcory
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.SDCARD">
            <summary>
             Implies sdcard(0,ext,etc...)
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.SYMLINKFILE">
            <summary>
             Implies symlink file
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.SYMLINKDIRECTORY">
            <summary>
             Implies symlink directory
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDFlashingMode">
            <summary>
             Flashing IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFlashingMode.GET_UNLOCK_ABILITY">
            <summary>
             Implies get_unlock_ability
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFlashingMode.GET_UNLOCK_BOOTLOADER_NONCE">
            <summary>
             Implies get_unlock_bootloader_nonce
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFlashingMode.LOCK">
            <summary>
             Implies lock
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFlashingMode.LOCK_BOOTLOADER">
            <summary>
             Implies lock_bootloader
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFlashingMode.LOCK_CRITICAL">
            <summary>
             Implies lock_critical
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFlashingMode.UNLOCK">
            <summary>
             Implies unlock
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFlashingMode.UNLOCK_CRITICAL">
            <summary>
             Implies unlock_critical
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDFRPortType">
            <summary>
             ADB forward/reverse port IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFRPortType.DEV">
            <summary>
             Implies dev
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFRPortType.JDWP">
            <summary>
             Implies jdwp (remote only)
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFRPortType.LOCALABSTRACT">
            <summary>
             Implies localabstract
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFRPortType.LOCALRESERVED">
            <summary>
             Implies localreserved
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFRPortType.LOCALFILESYSTEM">
            <summary>
             Implies localfilesystem
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFRPortType.TCP">
            <summary>
             Implies tcp
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDHash">
            <summary>
             Hash IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.MD5">
            <summary>
             Implies MD5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.SHA1">
            <summary>
             Implies SHA-1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.SHA256">
            <summary>
             Implies SHA-256
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.SHA384">
            <summary>
             Implies SHA-384
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.SHA512">
            <summary>
             Implies SHA-512
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDInstallLocation">
            <summary>
             Package-Manager install location id's
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDInstallLocation.ERROR">
            <summary>
             Implies Error
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDInstallLocation.AUTO">
            <summary>
             Implies Auto
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDInstallLocation.INTERNAL">
            <summary>
             Implies Internal
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDInstallLocation.EXTERNAL">
            <summary>
             Implies External
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDKeyInputSource">
            <summary>
             Key input source IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.KEYBOARD">
            <summary>
             Implies keyboard
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.MOUSE">
            <summary>
             Implies mouse
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.JOYSTICK">
            <summary>
             Implies joystick
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.TOUCHNAVIGATION">
            <summary>
             Implies touchnavigation
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.TOUCHPAD">
            <summary>
             Implies touchpad
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.TRACKBALL">
            <summary>
             Implies trackball
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.DPAD">
            <summary>
             Implies dpad
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.STYLUS">
            <summary>
             Implies stylus
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.GAMEPAD">
            <summary>
             Implies gamepad
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyInputSource.TOUCHSCREEN">
            <summary>
             Implies touchscreen
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDKeyEvent">
            <summary>
             Device keyevent IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_0">
            <summary>
             Implies 0
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_1">
            <summary>
             Implies 1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_2">
            <summary>
             Implies 2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_3">
            <summary>
             Implies 3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_3D_MODE">
            <summary>
             Implies 3D Mode key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_4">
            <summary>
             Implies 4
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_5">
            <summary>
             Implies 5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_6">
            <summary>
             Implies 6
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_7">
            <summary>
             Implies 7
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_8">
            <summary>
             Implies 8
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_9">
            <summary>
             Implies 9
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_A">
            <summary>
             Implies A
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ALT_LEFT">
            <summary>
             Implies left alt
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ALT_RIGHT">
            <summary>
             Implies right alt
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_APOSTROPHE">
            <summary>
             Implies '
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_APP_SWITCH">
            <summary>
             Implies App switch key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ASSIST">
            <summary>
             Implies Assist key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_AT">
            <summary>
             Implies @
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_AVR_INPUT">
            <summary>
             Implies A/V Receiver input key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_AVR_POWER">
            <summary>
             Implies A/V Receiver power key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_B">
            <summary>
             Implies B
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BACK">
            <summary>
             Implies Back
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BACKSLASH">
            <summary>
             Implies \
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BOOKMARK">
            <summary>
             Implies Bookmark key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BREAK">
            <summary>
             Implies Break / Pause key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BRIGHTNESS_DOWN">
            <summary>
             Implies Brightness Down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BRIGHTNESS_UP">
            <summary>
             Implies Brightness Up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_1">
            <summary>
             Implies Generic Game Pad Button #1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_10">
            <summary>
             Implies Generic Game Pad Button #10
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_11">
            <summary>
             Implies Generic Game Pad Button #11
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_12">
            <summary>
             Implies Generic Game Pad Button #12
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_13">
            <summary>
             Implies Generic Game Pad Button #13
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_14">
            <summary>
             Implies Generic Game Pad Button #14
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_15">
            <summary>
             Implies Generic Game Pad Button #15
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_16">
            <summary>
             Implies Generic Game Pad Button #16
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_2">
            <summary>
             Implies Generic Game Pad Button #2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_3">
            <summary>
             Implies Generic Game Pad Button #3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_4">
            <summary>
             Implies Generic Game Pad Button #4
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_5">
            <summary>
             Implies Generic Game Pad Button #5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_6">
            <summary>
             Implies Generic Game Pad Button #6
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_7">
            <summary>
             Implies Generic Game Pad Button #7
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_8">
            <summary>
             Implies Generic Game Pad Button #8
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_9">
            <summary>
             Implies Generic Game Pad Button #9
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_A">
            <summary>
             Implies A Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_B">
            <summary>
             Implies B Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_C">
            <summary>
             Implies C Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_L1">
            <summary>
             Implies L1 Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_L2">
            <summary>
             Implies L2 Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_MODE">
            <summary>
             Implies Mode Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_R1">
            <summary>
             Implies R1 Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_R2">
            <summary>
             Implies R2 Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_SELECT">
            <summary>
             Implies Select Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_START">
            <summary>
             Implies Start Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_THUMBL">
            <summary>
             Implies Left thumb Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_THUMBR">
            <summary>
             Implies Right thumb Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_X">
            <summary>
             Implies X Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_Y">
            <summary>
             Implies Y Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_Z">
            <summary>
             Implies Z Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_C">
            <summary>
             Implies C
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CALCULATOR">
            <summary>
             Implies Calculator special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CALENDAR">
            <summary>
             Implies Calendar special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CALL">
            <summary>
             Implies Call key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CAMERA">
            <summary>
             Implies Camera key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CAPS_LOCK">
            <summary>
             Implies Caps Lock key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CAPTIONS">
            <summary>
             Implies Toggle captions key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CHANNEL_DOWN">
            <summary>
             Implies Channel down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CHANNEL_UP">
            <summary>
             Implies Channel up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CLEAR">
            <summary>
             Implies Clear key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_COMMA">
            <summary>
             Implies ,
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CONTACTS">
            <summary>
             Implies Contacts special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CTRL_LEFT">
            <summary>
             Implies Left Control modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CTRL_RIGHT">
            <summary>
             Implies Right Control modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_D">
            <summary>
             Implies D
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DEL">
            <summary>
             Implies Backspace key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_CENTER">
            <summary>
             Implies Directional Pad Center key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_DOWN">
            <summary>
             Implies Directional Pad Down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_LEFT">
            <summary>
             Implies Directional Pad Left key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_RIGHT">
            <summary>
             Implies Directional Pad Right key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_UP">
            <summary>
             Implies Directional Pad Up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DVR">
            <summary>
             Implies DVR key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_E">
            <summary>
             Implies E
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_EISU">
            <summary>
             Implies Japanese alphanumeric key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ENDCALL">
            <summary>
             Implies End call
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ENTER">
            <summary>
             Implies Enter
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ENVELOPE">
            <summary>
             Implies Envelope special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_EQUALS">
            <summary>
             Implies =
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ESCAPE">
            <summary>
             Implies Escape key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_EXPLORER">
            <summary>
             Implies Explorer special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F">
            <summary>
             Implies F
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F1">
            <summary>
             Implies F1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F10">
            <summary>
             Implies F10
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F11">
            <summary>
             Implies F11
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F12">
            <summary>
             Implies F12
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F2">
            <summary>
             Implies F2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F3">
            <summary>
             Implies F3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F4">
            <summary>
             Implies F4
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F5">
            <summary>
             Implies F5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F6">
            <summary>
             Implies F6
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F7">
            <summary>
             Implies F7
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F8">
            <summary>
             Implies F8
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F9">
            <summary>
             Implies F9
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_FOCUS">
            <summary>
             Implies Camera Focus key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_FORWARD">
            <summary>
             Implies Forward key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_FORWARD_DEL">
            <summary>
             Implies Forward Delete key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_FUNCTION">
            <summary>
             Implies Function modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_G">
            <summary>
             Implies G
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_GRAVE">
            <summary>
             Implies `
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_GUIDE">
            <summary>
             Implies Guide key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_H">
            <summary>
             Implies H
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_HEADSETHOOK">
            <summary>
             Implies Headset Hook key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_HENKAN">
            <summary>
             Implies Japanese conversion key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_HOME">
            <summary>
             Implies Home key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_I">
            <summary>
             Implies I
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_INFO">
            <summary>
             Implies Info key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_INSERT">
            <summary>
             Implies Insert key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_J">
            <summary>
             Implies J
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_K">
            <summary>
             Implies K
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_KANA">
            <summary>
             Implies Japanese kana key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_KATAKANA_HIRAGANA">
            <summary>
             Implies Japanese katakana / hiragana key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_L">
            <summary>
             Implies L
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_LANGUAGE_SWITCH">
            <summary>
             Implies Language Switch key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_LEFT_BRACKET">
            <summary>
             Implies [
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_M">
            <summary>
             Implies M
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MANNER_MODE">
            <summary>
             Implies Manner Mode key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_AUDIO_TRACK">
            <summary>
             Implies Audio Track key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_CLOSE">
            <summary>
             Implies Close media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_EJECT">
            <summary>
             Implies Eject media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_FAST_FORWARD">
            <summary>
             Implies Fast Forward media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_NEXT">
            <summary>
             Implies Play Next media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_PAUSE">
            <summary>
             Implies Pause media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_PLAY">
            <summary>
             Implies Play media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_PLAY_PAUSE">
            <summary>
             Implies Play/Pause media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_PREVIOUS">
            <summary>
             Implies Play Previous media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_RECORD">
            <summary>
             Implies Record media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_REWIND">
            <summary>
             Implies Rewind media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_STOP">
            <summary>
             Implies Stop media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MENU">
            <summary>
             Implies Menu key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_META_LEFT">
            <summary>
             Implies Left Meta modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_META_RIGHT">
            <summary>
             Implies Right Meta modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MINUS">
            <summary>
             Implies -
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MOVE_END">
            <summary>
             Implies End Movement key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MOVE_HOME">
            <summary>
             Implies Home Movement key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MUHENKAN">
            <summary>
             Implies Japanese non-conversion key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MUSIC">
            <summary>
             Implies Music special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MUTE">
            <summary>
             Implies Mute key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_N">
            <summary>
             Implies N
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NOTIFICATION">
            <summary>
             Implies Notification key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUM">
            <summary>
             Implies Number modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_0">
            <summary>
             Implies 0
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_1">
            <summary>
             Implies 1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_2">
            <summary>
             Implies 2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_3">
            <summary>
             Implies 3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_4">
            <summary>
             Implies 4
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_5">
            <summary>
             Implies 5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_6">
            <summary>
             Implies 6
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_7">
            <summary>
             Implies 7
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_8">
            <summary>
             Implies 8
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_9">
            <summary>
             Implies 9
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_ADD">
            <summary>
             Implies Numeric keypad +
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_COMMA">
            <summary>
             Implies Numeric keypad ,
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_DIVIDE">
            <summary>
             Implies Numeric keypad /
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_DOT">
            <summary>
             Implies Numeric keypad .
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_ENTER">
            <summary>
             Implies Numeric keypad Enter key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_EQUALS">
            <summary>
             Implies Numeric keypad =
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_LEFT_PAREN">
            <summary>
             Implies Numeric keypad (
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_MULTIPLY">
            <summary>
             Implies Numeric keypad *
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_RIGHT_PAREN">
            <summary>
             Implies Numeric keypad )
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_SUBTRACT">
            <summary>
             Implies Numeric keypad -
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUM_LOCK">
            <summary>
             Implies Num Lock key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_O">
            <summary>
             Implies O
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_P">
            <summary>
             Implies P
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PAGE_DOWN">
            <summary>
             Implies Page Down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PAGE_UP">
            <summary>
             Implies Page Up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PERIOD">
            <summary>
             Implies .
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PICTSYMBOLS">
            <summary>
             Implies Picture Symbols modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PLUS">
            <summary>
             Implies +
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_POUND">
            <summary>
             Implies #
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_POWER">
            <summary>
             Implies Power key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PROG_BLUE">
            <summary>
             Implies Blue "programmable" key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PROG_GREEN">
            <summary>
             Implies Green "programmable" key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PROG_RED">
            <summary>
             Implies Red "programmable" key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PROG_YELLOW">
            <summary>
             Implies Yellow "programmable" key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_Q">
            <summary>
             Implies Q
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_R">
            <summary>
             Implies R
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_RIGHT_BRACKET">
            <summary>
             Implies ]
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_RO">
            <summary>
             Implies Japanese Ro key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_S">
            <summary>
             Implies S
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SCROLL_LOCK">
            <summary>
             Implies Scroll Lock key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SEARCH">
            <summary>
             Implies Search key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SEMICOLON">
            <summary>
             Implies ;
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SETTINGS">
            <summary>
             Implies Settings key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SHIFT_LEFT">
            <summary>
             Implies Left Shift modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SHIFT_RIGHT">
            <summary>
             Implies Right Shift modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SLASH">
            <summary>
             Implies /
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SOFT_LEFT">
            <summary>
             Implies Soft Left key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SOFT_RIGHT">
            <summary>
             Implies Soft Right key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SPACE">
            <summary>
             Implies Space " "
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_STAR">
            <summary>
             Implies *
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_STB_INPUT">
            <summary>
             Implies Set-top-box input key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_STB_POWER">
            <summary>
             Implies Set-top-box power key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SWITCH_CHARSET">
            <summary>
             Implies Switch Charset modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SYM">
            <summary>
             Implies Symbol modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SYSRQ">
            <summary>
             Implies System Request / Print Screen key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_T">
            <summary>
             Implies T
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_TAB">
            <summary>
             Implies Tab key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_TV">
            <summary>
             Implies TV key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_TV_INPUT">
            <summary>
             Implies TV input key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_TV_POWER">
            <summary>
             Implies TV power key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_U">
            <summary>
             Implies U
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_UNKNOWN">
            <summary>
             Implies Unknown key code
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_V">
            <summary>
             Implies V
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_VOLUME_DOWN">
            <summary>
             Implies Volume Down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_VOLUME_MUTE">
            <summary>
             Implies Volume Mute key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_VOLUME_UP">
            <summary>
             Implies Volume Up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_W">
            <summary>
             Implies W
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_WINDOW">
            <summary>
             Implies Window key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_X">
            <summary>
             Implies X
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_Y">
            <summary>
             Implies Y
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_YEN">
            <summary>
             Implies Japanese Yen key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_Z">
            <summary>
             Implies Z
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ZENKAKU_HANKAKU">
            <summary>
             Implies Japanese full-width / half-width key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ZOOM_IN">
            <summary>
             Implies Zoom in key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ZOOM_OUT">
            <summary>
             Implies Zoom out key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.MAX_KEYCODE">
            <summary>
             Implies MAX_KEYCODE *NOTE* This constant was deprecated in API level 3
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDSDK">
            <summary>
             Android SDK ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.UNKNOWN">
            <summary>
             Implies unknown
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V1_5">
            <summary>
             Implies Android 1.5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V1_6">
            <summary>
             Implies Android 1.6
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V2_1">
            <summary>
             Implies Android 2.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V2_2">
            <summary>
             Implies Android 2.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V2_3_3">
            <summary>
             Implies Android 2.3.3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V3_0">
            <summary>
             Implies Android 3.0
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V3_1">
            <summary>
             Implies Android 3.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V3_2">
            <summary>
             Implies Android 3.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V4_0">
            <summary>
             Implies Android 4.0
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V4_0_3">
            <summary>
             Implies Android 4.0.3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V4_1_2">
            <summary>
             Implies Android 4.1.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V4_2_2">
            <summary>
             Implies Android 4.2.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V4_3_1">
            <summary>
             Implies Android 4.3.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V4_4_2">
            <summary>
             Implies Android 4.4.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V4_4W_2">
            <summary>
             Implies Android 4.4W.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V5_0_1">
            <summary>
             Implies Android 5.0.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V5_1_1">
            <summary>
             Implies Android 5.1.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V6_0">
            <summary>
             Implies Android 6.0
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V7_0">
            <summary>
             Implies Android 7.0
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSDK.V7_1_1">
            <summary>
             Implies Android 7.1.1
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDSu">
            <summary>
             su mode IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSu.AUTO">
            <summary>
             If adbd run as root use (su -c) for any shell request.
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSu.ENFORCE">
            <summary>
             Use (su -c) for any shell request, even adbd runs not in root mode.
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDSu.NEVER">
            <summary>
             Never use su for shell requests, except the methods/classes that requires su.
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDTar">
            <summary>
             Tar compress IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.NONE">
            <summary>
             Implies none
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.BZIP2">
            <summary>
             Implies bzip2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.GZIP">
            <summary>
             Implies gzip
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.LZMA">
            <summary>
             Implies lzma
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.TAR">
            <summary>
             Implies tar
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.XZ">
            <summary>
             Implies xz
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDTransfer">
            <summary>
             Transfer IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTransfer.CREATED">
            <summary>
             Implies created (file/folder)
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTransfer.ERROR">
            <summary>
             Implies error/failed
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTransfer.OK">
            <summary>
             Implies ok/successfull
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTransfer.UNKNOWN">
            <summary>
             Implies unknown
            </summary>
        </member>
    </members>
</doc>
